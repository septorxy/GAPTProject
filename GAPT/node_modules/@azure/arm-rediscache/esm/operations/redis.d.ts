import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import { RedisManagementClientContext } from "../redisManagementClientContext";
/** Class representing a Redis. */
export declare class Redis {
    private readonly client;
    /**
     * Create a Redis.
     * @param {RedisManagementClientContext} client Reference to the service client.
     */
    constructor(client: RedisManagementClientContext);
    /**
     * Checks that the redis cache name is valid and is not already in use.
     * @param parameters Parameters supplied to the CheckNameAvailability Redis operation. The only
     * supported resource type is 'Microsoft.Cache/redis'
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    checkNameAvailability(parameters: Models.CheckNameAvailabilityParameters, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param parameters Parameters supplied to the CheckNameAvailability Redis operation. The only
     * supported resource type is 'Microsoft.Cache/redis'
     * @param callback The callback
     */
    checkNameAvailability(parameters: Models.CheckNameAvailabilityParameters, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param parameters Parameters supplied to the CheckNameAvailability Redis operation. The only
     * supported resource type is 'Microsoft.Cache/redis'
     * @param options The optional parameters
     * @param callback The callback
     */
    checkNameAvailability(parameters: Models.CheckNameAvailabilityParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets any upgrade notifications for a Redis cache.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param history how many minutes in past to look for upgrade notifications
     * @param [options] The optional parameters
     * @returns Promise<Models.RedisListUpgradeNotificationsResponse>
     */
    listUpgradeNotifications(resourceGroupName: string, name: string, history: number, options?: msRest.RequestOptionsBase): Promise<Models.RedisListUpgradeNotificationsResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param history how many minutes in past to look for upgrade notifications
     * @param callback The callback
     */
    listUpgradeNotifications(resourceGroupName: string, name: string, history: number, callback: msRest.ServiceCallback<Models.NotificationListResponse>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param history how many minutes in past to look for upgrade notifications
     * @param options The optional parameters
     * @param callback The callback
     */
    listUpgradeNotifications(resourceGroupName: string, name: string, history: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NotificationListResponse>): void;
    /**
     * Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param parameters Parameters supplied to the Create Redis operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.RedisCreateResponse>
     */
    create(resourceGroupName: string, name: string, parameters: Models.RedisCreateParameters, options?: msRest.RequestOptionsBase): Promise<Models.RedisCreateResponse>;
    /**
     * Update an existing Redis cache.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param parameters Parameters supplied to the Update Redis operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.RedisUpdateResponse>
     */
    update(resourceGroupName: string, name: string, parameters: Models.RedisUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.RedisUpdateResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param parameters Parameters supplied to the Update Redis operation.
     * @param callback The callback
     */
    update(resourceGroupName: string, name: string, parameters: Models.RedisUpdateParameters, callback: msRest.ServiceCallback<Models.RedisResource>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param parameters Parameters supplied to the Update Redis operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    update(resourceGroupName: string, name: string, parameters: Models.RedisUpdateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisResource>): void;
    /**
     * Deletes a Redis cache.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Gets a Redis cache (resource description).
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param [options] The optional parameters
     * @returns Promise<Models.RedisGetResponse>
     */
    get(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.RedisGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param callback The callback
     */
    get(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.RedisResource>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisResource>): void;
    /**
     * Lists all Redis caches in a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param [options] The optional parameters
     * @returns Promise<Models.RedisListByResourceGroupResponse>
     */
    listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.RedisListByResourceGroupResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param callback The callback
     */
    listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.RedisListResult>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisListResult>): void;
    /**
     * Gets all Redis caches in the specified subscription.
     * @param [options] The optional parameters
     * @returns Promise<Models.RedisListResponse>
     */
    list(options?: msRest.RequestOptionsBase): Promise<Models.RedisListResponse>;
    /**
     * @param callback The callback
     */
    list(callback: msRest.ServiceCallback<Models.RedisListResult>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisListResult>): void;
    /**
     * Retrieve a Redis cache's access keys. This operation requires write permission to the cache
     * resource.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param [options] The optional parameters
     * @returns Promise<Models.RedisListKeysResponse>
     */
    listKeys(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.RedisListKeysResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param callback The callback
     */
    listKeys(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.RedisAccessKeys>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param options The optional parameters
     * @param callback The callback
     */
    listKeys(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisAccessKeys>): void;
    /**
     * Regenerate Redis cache's access keys. This operation requires write permission to the cache
     * resource.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param keyType The Redis access key to regenerate. Possible values include: 'Primary',
     * 'Secondary'
     * @param [options] The optional parameters
     * @returns Promise<Models.RedisRegenerateKeyResponse>
     */
    regenerateKey(resourceGroupName: string, name: string, keyType: Models.RedisKeyType, options?: msRest.RequestOptionsBase): Promise<Models.RedisRegenerateKeyResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param keyType The Redis access key to regenerate. Possible values include: 'Primary',
     * 'Secondary'
     * @param callback The callback
     */
    regenerateKey(resourceGroupName: string, name: string, keyType: Models.RedisKeyType, callback: msRest.ServiceCallback<Models.RedisAccessKeys>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param keyType The Redis access key to regenerate. Possible values include: 'Primary',
     * 'Secondary'
     * @param options The optional parameters
     * @param callback The callback
     */
    regenerateKey(resourceGroupName: string, name: string, keyType: Models.RedisKeyType, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisAccessKeys>): void;
    /**
     * Reboot specified Redis node(s). This operation requires write permission to the cache resource.
     * There can be potential data loss.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param parameters Specifies which Redis node(s) to reboot.
     * @param [options] The optional parameters
     * @returns Promise<Models.RedisForceRebootResponse2>
     */
    forceReboot(resourceGroupName: string, name: string, parameters: Models.RedisRebootParameters, options?: msRest.RequestOptionsBase): Promise<Models.RedisForceRebootResponse2>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param parameters Specifies which Redis node(s) to reboot.
     * @param callback The callback
     */
    forceReboot(resourceGroupName: string, name: string, parameters: Models.RedisRebootParameters, callback: msRest.ServiceCallback<Models.RedisForceRebootResponse>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param parameters Specifies which Redis node(s) to reboot.
     * @param options The optional parameters
     * @param callback The callback
     */
    forceReboot(resourceGroupName: string, name: string, parameters: Models.RedisRebootParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisForceRebootResponse>): void;
    /**
     * Import data into Redis cache.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param parameters Parameters for Redis import operation.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    importData(resourceGroupName: string, name: string, parameters: Models.ImportRDBParameters, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Export data from the redis cache to blobs in a container.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param parameters Parameters for Redis export operation.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    exportData(resourceGroupName: string, name: string, parameters: Models.ExportRDBParameters, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param parameters Parameters supplied to the Create Redis operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreate(resourceGroupName: string, name: string, parameters: Models.RedisCreateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Deletes a Redis cache.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginDeleteMethod(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Import data into Redis cache.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param parameters Parameters for Redis import operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginImportData(resourceGroupName: string, name: string, parameters: Models.ImportRDBParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Export data from the redis cache to blobs in a container.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param parameters Parameters for Redis export operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginExportData(resourceGroupName: string, name: string, parameters: Models.ExportRDBParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Lists all Redis caches in a resource group.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.RedisListByResourceGroupNextResponse>
     */
    listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.RedisListByResourceGroupNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RedisListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisListResult>): void;
    /**
     * Gets all Redis caches in the specified subscription.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.RedisListNextResponse>
     */
    listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.RedisListNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RedisListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisListResult>): void;
}
//# sourceMappingURL=redis.d.ts.map