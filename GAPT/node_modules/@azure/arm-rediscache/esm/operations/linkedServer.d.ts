import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import { RedisManagementClientContext } from "../redisManagementClientContext";
/** Class representing a LinkedServer. */
export declare class LinkedServer {
    private readonly client;
    /**
     * Create a LinkedServer.
     * @param {RedisManagementClientContext} client Reference to the service client.
     */
    constructor(client: RedisManagementClientContext);
    /**
     * Adds a linked server to the Redis cache (requires Premium SKU).
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param linkedServerName The name of the linked server that is being added to the Redis cache.
     * @param parameters Parameters supplied to the Create Linked server operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.LinkedServerCreateResponse>
     */
    create(resourceGroupName: string, name: string, linkedServerName: string, parameters: Models.RedisLinkedServerCreateParameters, options?: msRest.RequestOptionsBase): Promise<Models.LinkedServerCreateResponse>;
    /**
     * Deletes the linked server from a redis cache (requires Premium SKU).
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the redis cache.
     * @param linkedServerName The name of the linked server that is being added to the Redis cache.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, name: string, linkedServerName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the redis cache.
     * @param linkedServerName The name of the linked server that is being added to the Redis cache.
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, name: string, linkedServerName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the redis cache.
     * @param linkedServerName The name of the linked server that is being added to the Redis cache.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, name: string, linkedServerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets the detailed information about a linked server of a redis cache (requires Premium SKU).
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the redis cache.
     * @param linkedServerName The name of the linked server.
     * @param [options] The optional parameters
     * @returns Promise<Models.LinkedServerGetResponse>
     */
    get(resourceGroupName: string, name: string, linkedServerName: string, options?: msRest.RequestOptionsBase): Promise<Models.LinkedServerGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the redis cache.
     * @param linkedServerName The name of the linked server.
     * @param callback The callback
     */
    get(resourceGroupName: string, name: string, linkedServerName: string, callback: msRest.ServiceCallback<Models.RedisLinkedServerWithProperties>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the redis cache.
     * @param linkedServerName The name of the linked server.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, name: string, linkedServerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisLinkedServerWithProperties>): void;
    /**
     * Gets the list of linked servers associated with this redis cache (requires Premium SKU).
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the redis cache.
     * @param [options] The optional parameters
     * @returns Promise<Models.LinkedServerListResponse>
     */
    list(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.LinkedServerListResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the redis cache.
     * @param callback The callback
     */
    list(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.RedisLinkedServerWithPropertiesList>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the redis cache.
     * @param options The optional parameters
     * @param callback The callback
     */
    list(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisLinkedServerWithPropertiesList>): void;
    /**
     * Adds a linked server to the Redis cache (requires Premium SKU).
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param linkedServerName The name of the linked server that is being added to the Redis cache.
     * @param parameters Parameters supplied to the Create Linked server operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreate(resourceGroupName: string, name: string, linkedServerName: string, parameters: Models.RedisLinkedServerCreateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Gets the list of linked servers associated with this redis cache (requires Premium SKU).
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.LinkedServerListNextResponse>
     */
    listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.LinkedServerListNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RedisLinkedServerWithPropertiesList>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisLinkedServerWithPropertiesList>): void;
}
//# sourceMappingURL=linkedServer.d.ts.map