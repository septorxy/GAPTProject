/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/linkedServerMappers";
import * as Parameters from "../models/parameters";
/** Class representing a LinkedServer. */
var LinkedServer = /** @class */ (function () {
    /**
     * Create a LinkedServer.
     * @param {RedisManagementClientContext} client Reference to the service client.
     */
    function LinkedServer(client) {
        this.client = client;
    }
    /**
     * Adds a linked server to the Redis cache (requires Premium SKU).
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param linkedServerName The name of the linked server that is being added to the Redis cache.
     * @param parameters Parameters supplied to the Create Linked server operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.LinkedServerCreateResponse>
     */
    LinkedServer.prototype.create = function (resourceGroupName, name, linkedServerName, parameters, options) {
        return this.beginCreate(resourceGroupName, name, linkedServerName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    LinkedServer.prototype.deleteMethod = function (resourceGroupName, name, linkedServerName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            linkedServerName: linkedServerName,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    LinkedServer.prototype.get = function (resourceGroupName, name, linkedServerName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            linkedServerName: linkedServerName,
            options: options
        }, getOperationSpec, callback);
    };
    LinkedServer.prototype.list = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listOperationSpec, callback);
    };
    /**
     * Adds a linked server to the Redis cache (requires Premium SKU).
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param linkedServerName The name of the linked server that is being added to the Redis cache.
     * @param parameters Parameters supplied to the Create Linked server operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    LinkedServer.prototype.beginCreate = function (resourceGroupName, name, linkedServerName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            linkedServerName: linkedServerName,
            parameters: parameters,
            options: options
        }, beginCreateOperationSpec, options);
    };
    LinkedServer.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    return LinkedServer;
}());
export { LinkedServer };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/linkedServers/{linkedServerName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.linkedServerName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/linkedServers/{linkedServerName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.linkedServerName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RedisLinkedServerWithProperties
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/linkedServers",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RedisLinkedServerWithPropertiesList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/linkedServers/{linkedServerName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.linkedServerName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.RedisLinkedServerCreateParameters), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.RedisLinkedServerWithProperties
        },
        201: {
            bodyMapper: Mappers.RedisLinkedServerWithProperties
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RedisLinkedServerWithPropertiesList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=linkedServer.js.map