/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/redisMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Redis. */
var Redis = /** @class */ (function () {
    /**
     * Create a Redis.
     * @param {RedisManagementClientContext} client Reference to the service client.
     */
    function Redis(client) {
        this.client = client;
    }
    Redis.prototype.checkNameAvailability = function (parameters, options, callback) {
        return this.client.sendOperationRequest({
            parameters: parameters,
            options: options
        }, checkNameAvailabilityOperationSpec, callback);
    };
    Redis.prototype.listUpgradeNotifications = function (resourceGroupName, name, history, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            history: history,
            options: options
        }, listUpgradeNotificationsOperationSpec, callback);
    };
    /**
     * Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param parameters Parameters supplied to the Create Redis operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.RedisCreateResponse>
     */
    Redis.prototype.create = function (resourceGroupName, name, parameters, options) {
        return this.beginCreate(resourceGroupName, name, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Redis.prototype.update = function (resourceGroupName, name, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            parameters: parameters,
            options: options
        }, updateOperationSpec, callback);
    };
    /**
     * Deletes a Redis cache.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Redis.prototype.deleteMethod = function (resourceGroupName, name, options) {
        return this.beginDeleteMethod(resourceGroupName, name, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Redis.prototype.get = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, getOperationSpec, callback);
    };
    Redis.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listByResourceGroupOperationSpec, callback);
    };
    Redis.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    Redis.prototype.listKeys = function (resourceGroupName, name, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, listKeysOperationSpec, callback);
    };
    Redis.prototype.regenerateKey = function (resourceGroupName, name, keyType, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            keyType: keyType,
            options: options
        }, regenerateKeyOperationSpec, callback);
    };
    Redis.prototype.forceReboot = function (resourceGroupName, name, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            name: name,
            parameters: parameters,
            options: options
        }, forceRebootOperationSpec, callback);
    };
    /**
     * Import data into Redis cache.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param parameters Parameters for Redis import operation.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Redis.prototype.importData = function (resourceGroupName, name, parameters, options) {
        return this.beginImportData(resourceGroupName, name, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Export data from the redis cache to blobs in a container.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param parameters Parameters for Redis export operation.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Redis.prototype.exportData = function (resourceGroupName, name, parameters, options) {
        return this.beginExportData(resourceGroupName, name, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param parameters Parameters supplied to the Create Redis operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Redis.prototype.beginCreate = function (resourceGroupName, name, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            parameters: parameters,
            options: options
        }, beginCreateOperationSpec, options);
    };
    /**
     * Deletes a Redis cache.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Redis.prototype.beginDeleteMethod = function (resourceGroupName, name, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    /**
     * Import data into Redis cache.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param parameters Parameters for Redis import operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Redis.prototype.beginImportData = function (resourceGroupName, name, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            parameters: parameters,
            options: options
        }, beginImportDataOperationSpec, options);
    };
    /**
     * Export data from the redis cache to blobs in a container.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the Redis cache.
     * @param parameters Parameters for Redis export operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Redis.prototype.beginExportData = function (resourceGroupName, name, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            name: name,
            parameters: parameters,
            options: options
        }, beginExportDataOperationSpec, options);
    };
    Redis.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByResourceGroupNextOperationSpec, callback);
    };
    Redis.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    return Redis;
}());
export { Redis };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var checkNameAvailabilityOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Cache/CheckNameAvailability",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.CheckNameAvailabilityParameters), { required: true })
    },
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listUpgradeNotificationsOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/listUpgradeNotifications",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion,
        Parameters.history
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.NotificationListResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.RedisUpdateParameters), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.RedisResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RedisResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RedisListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Cache/Redis",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RedisListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listKeysOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/listKeys",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RedisAccessKeys
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var regenerateKeyOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/regenerateKey",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: {
            keyType: "keyType"
        },
        mapper: __assign(__assign({}, Mappers.RedisRegenerateKeyParameters), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.RedisAccessKeys
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var forceRebootOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/forceReboot",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.RedisRebootParameters), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.RedisForceRebootResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.RedisCreateParameters), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.RedisResource
        },
        201: {
            bodyMapper: Mappers.RedisResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginImportDataOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/import",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.ImportRDBParameters), { required: true })
    },
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginExportDataOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/export",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.ExportRDBParameters), { required: true })
    },
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RedisListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.RedisListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=redis.js.map