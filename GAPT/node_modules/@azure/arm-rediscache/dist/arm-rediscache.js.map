{"version":3,"file":"arm-rediscache.js","sources":["../node_modules/tslib/tslib.es6.js","../src/models/index.ts","../src/models/mappers.ts","../src/models/operationsMappers.ts","../src/models/parameters.ts","../src/operations/operations.ts","../src/models/redisMappers.ts","../src/operations/redis.ts","../src/models/firewallRulesMappers.ts","../src/operations/firewallRules.ts","../src/models/patchSchedulesMappers.ts","../src/operations/patchSchedules.ts","../src/models/linkedServerMappers.ts","../src/operations/linkedServer.ts","../src/redisManagementClientContext.ts","../src/redisManagementClient.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { BaseResource, CloudError, AzureServiceClientOptions } from \"@azure/ms-rest-azure-js\";\nimport * as msRest from \"@azure/ms-rest-js\";\n\nexport { BaseResource, CloudError };\n\n/**\n * SKU parameters supplied to the create Redis operation.\n */\nexport interface Sku {\n  /**\n   * The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium). Possible values\n   * include: 'Basic', 'Standard', 'Premium'\n   */\n  name: SkuName;\n  /**\n   * The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium). Possible\n   * values include: 'C', 'P'\n   */\n  family: SkuFamily;\n  /**\n   * The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2,\n   * 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4).\n   */\n  capacity: number;\n}\n\n/**\n * Redis cache access keys.\n */\nexport interface RedisAccessKeys {\n  /**\n   * The current primary key that clients can use to authenticate with Redis cache.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly primaryKey?: string;\n  /**\n   * The current secondary key that clients can use to authenticate with Redis cache.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly secondaryKey?: string;\n}\n\n/**\n * Linked server Id\n */\nexport interface RedisLinkedServer {\n  /**\n   * Linked server Id.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly id?: string;\n}\n\n/**\n * Details of single instance of redis.\n */\nexport interface RedisInstanceDetails {\n  /**\n   * Redis instance SSL port.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly sslPort?: number;\n  /**\n   * If enableNonSslPort is true, provides Redis instance Non-SSL port.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly nonSslPort?: number;\n  /**\n   * If the Cache uses availability zones, specifies availability zone where this instance is\n   * located.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly zone?: string;\n  /**\n   * If clustering is enabled, the Shard ID of Redis Instance\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly shardId?: number;\n  /**\n   * Specifies whether the instance is a master node.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly isMaster?: boolean;\n}\n\n/**\n * The Resource definition.\n */\nexport interface Resource extends BaseResource {\n  /**\n   * Resource ID.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly id?: string;\n  /**\n   * Resource name.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly name?: string;\n  /**\n   * Resource type.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly type?: string;\n}\n\n/**\n * The resource model definition for a ARM proxy resource. It will have everything other than\n * required location and tags\n */\nexport interface ProxyResource extends Resource {\n}\n\n/**\n * The resource model definition for a ARM tracked top level resource\n */\nexport interface TrackedResource extends Resource {\n  /**\n   * Resource tags.\n   */\n  tags?: { [propertyName: string]: string };\n  /**\n   * The geo-location where the resource lives\n   */\n  location: string;\n}\n\n/**\n * Parameters supplied to the Create Redis operation.\n */\nexport interface RedisCreateParameters {\n  /**\n   * All Redis Settings. Few possible keys:\n   * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value\n   * etc.\n   */\n  redisConfiguration?: { [propertyName: string]: string };\n  /**\n   * Specifies whether the non-ssl Redis server port (6379) is enabled.\n   */\n  enableNonSslPort?: boolean;\n  /**\n   * The number of replicas to be created per master.\n   */\n  replicasPerMaster?: number;\n  /**\n   * A dictionary of tenant settings\n   */\n  tenantSettings?: { [propertyName: string]: string };\n  /**\n   * The number of shards to be created on a Premium Cluster Cache.\n   */\n  shardCount?: number;\n  /**\n   * Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0',\n   * '1.1', '1.2'). Possible values include: '1.0', '1.1', '1.2'\n   */\n  minimumTlsVersion?: TlsVersion;\n  /**\n   * The SKU of the Redis cache to deploy.\n   */\n  sku: Sku;\n  /**\n   * The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example\n   * format:\n   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1\n   */\n  subnetId?: string;\n  /**\n   * Static IP address. Required when deploying a Redis cache inside an existing Azure Virtual\n   * Network.\n   */\n  staticIP?: string;\n  /**\n   * A list of availability zones denoting where the resource needs to come from.\n   */\n  zones?: string[];\n  /**\n   * The geo-location where the resource lives\n   */\n  location: string;\n  /**\n   * Resource tags.\n   */\n  tags?: { [propertyName: string]: string };\n}\n\n/**\n * Parameters supplied to the Update Redis operation.\n */\nexport interface RedisUpdateParameters {\n  /**\n   * All Redis Settings. Few possible keys:\n   * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value\n   * etc.\n   */\n  redisConfiguration?: { [propertyName: string]: string };\n  /**\n   * Specifies whether the non-ssl Redis server port (6379) is enabled.\n   */\n  enableNonSslPort?: boolean;\n  /**\n   * The number of replicas to be created per master.\n   */\n  replicasPerMaster?: number;\n  /**\n   * A dictionary of tenant settings\n   */\n  tenantSettings?: { [propertyName: string]: string };\n  /**\n   * The number of shards to be created on a Premium Cluster Cache.\n   */\n  shardCount?: number;\n  /**\n   * Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0',\n   * '1.1', '1.2'). Possible values include: '1.0', '1.1', '1.2'\n   */\n  minimumTlsVersion?: TlsVersion;\n  /**\n   * The SKU of the Redis cache to deploy.\n   */\n  sku?: Sku;\n  /**\n   * Resource tags.\n   */\n  tags?: { [propertyName: string]: string };\n}\n\n/**\n * Specifies a range of IP addresses permitted to connect to the cache\n */\nexport interface RedisFirewallRuleProperties {\n  /**\n   * lowest IP address included in the range\n   */\n  startIP: string;\n  /**\n   * highest IP address included in the range\n   */\n  endIP: string;\n}\n\n/**\n * A firewall rule on a redis cache has a name, and describes a contiguous range of IP addresses\n * permitted to connect\n */\nexport interface RedisFirewallRule extends ProxyResource {\n  /**\n   * lowest IP address included in the range\n   */\n  startIP: string;\n  /**\n   * highest IP address included in the range\n   */\n  endIP: string;\n}\n\n/**\n * Parameters required for creating a firewall rule on redis cache.\n */\nexport interface RedisFirewallRuleCreateParameters {\n  /**\n   * lowest IP address included in the range\n   */\n  startIP: string;\n  /**\n   * highest IP address included in the range\n   */\n  endIP: string;\n}\n\n/**\n * A single Redis item in List or Get Operation.\n */\nexport interface RedisResource extends TrackedResource {\n  /**\n   * All Redis Settings. Few possible keys:\n   * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value\n   * etc.\n   */\n  redisConfiguration?: { [propertyName: string]: string };\n  /**\n   * Specifies whether the non-ssl Redis server port (6379) is enabled.\n   */\n  enableNonSslPort?: boolean;\n  /**\n   * The number of replicas to be created per master.\n   */\n  replicasPerMaster?: number;\n  /**\n   * A dictionary of tenant settings\n   */\n  tenantSettings?: { [propertyName: string]: string };\n  /**\n   * The number of shards to be created on a Premium Cluster Cache.\n   */\n  shardCount?: number;\n  /**\n   * Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0',\n   * '1.1', '1.2'). Possible values include: '1.0', '1.1', '1.2'\n   */\n  minimumTlsVersion?: TlsVersion;\n  /**\n   * The SKU of the Redis cache to deploy.\n   */\n  sku: Sku;\n  /**\n   * The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example\n   * format:\n   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1\n   */\n  subnetId?: string;\n  /**\n   * Static IP address. Required when deploying a Redis cache inside an existing Azure Virtual\n   * Network.\n   */\n  staticIP?: string;\n  /**\n   * Redis version.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly redisVersion?: string;\n  /**\n   * Redis instance provisioning status. Possible values include: 'Creating', 'Deleting',\n   * 'Disabled', 'Failed', 'Linking', 'Provisioning', 'RecoveringScaleFailure', 'Scaling',\n   * 'Succeeded', 'Unlinking', 'Unprovisioning', 'Updating'\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly provisioningState?: ProvisioningState;\n  /**\n   * Redis host name.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly hostName?: string;\n  /**\n   * Redis non-SSL port.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly port?: number;\n  /**\n   * Redis SSL port.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly sslPort?: number;\n  /**\n   * The keys of the Redis cache - not set if this object is not the response to Create or Update\n   * redis cache\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly accessKeys?: RedisAccessKeys;\n  /**\n   * List of the linked servers associated with the cache\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly linkedServers?: RedisLinkedServer[];\n  /**\n   * List of the Redis instances associated with the cache\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly instances?: RedisInstanceDetails[];\n  /**\n   * A list of availability zones denoting where the resource needs to come from.\n   */\n  zones?: string[];\n}\n\n/**\n * Specifies which Redis access keys to reset.\n */\nexport interface RedisRegenerateKeyParameters {\n  /**\n   * The Redis access key to regenerate. Possible values include: 'Primary', 'Secondary'\n   */\n  keyType: RedisKeyType;\n}\n\n/**\n * Specifies which Redis node(s) to reboot.\n */\nexport interface RedisRebootParameters {\n  /**\n   * Which Redis node(s) to reboot. Depending on this value data loss is possible. Possible values\n   * include: 'PrimaryNode', 'SecondaryNode', 'AllNodes'\n   */\n  rebootType?: RebootType;\n  /**\n   * If clustering is enabled, the ID of the shard to be rebooted.\n   */\n  shardId?: number;\n  /**\n   * A list of redis instances to reboot, specified by per-instance SSL ports or non-SSL ports.\n   */\n  ports?: number[];\n}\n\n/**\n * Parameters for Redis export operation.\n */\nexport interface ExportRDBParameters {\n  /**\n   * File format.\n   */\n  format?: string;\n  /**\n   * Prefix to use for exported files.\n   */\n  prefix: string;\n  /**\n   * Container name to export to.\n   */\n  container: string;\n}\n\n/**\n * Parameters for Redis import operation.\n */\nexport interface ImportRDBParameters {\n  /**\n   * File format.\n   */\n  format?: string;\n  /**\n   * files to import.\n   */\n  files: string[];\n}\n\n/**\n * Patch schedule entry for a Premium Redis Cache.\n */\nexport interface ScheduleEntry {\n  /**\n   * Day of the week when a cache can be patched. Possible values include: 'Monday', 'Tuesday',\n   * 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Everyday', 'Weekend'\n   */\n  dayOfWeek: DayOfWeek;\n  /**\n   * Start hour after which cache patching can start.\n   */\n  startHourUtc: number;\n  /**\n   * ISO8601 timespan specifying how much time cache patching can take.\n   */\n  maintenanceWindow?: string;\n}\n\n/**\n * List of patch schedules for a Redis cache.\n */\nexport interface ScheduleEntries {\n  /**\n   * List of patch schedules for a Redis cache.\n   */\n  scheduleEntries: ScheduleEntry[];\n}\n\n/**\n * Response to put/get patch schedules for Redis cache.\n */\nexport interface RedisPatchSchedule extends ProxyResource {\n  /**\n   * List of patch schedules for a Redis cache.\n   */\n  scheduleEntries: ScheduleEntry[];\n}\n\n/**\n * Response to force reboot for Redis cache.\n */\nexport interface RedisForceRebootResponse {\n  /**\n   * Status message\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly message?: string;\n}\n\n/**\n * Create properties for a linked server\n */\nexport interface RedisLinkedServerCreateProperties {\n  /**\n   * Fully qualified resourceId of the linked redis cache.\n   */\n  linkedRedisCacheId: string;\n  /**\n   * Location of the linked redis cache.\n   */\n  linkedRedisCacheLocation: string;\n  /**\n   * Role of the linked server. Possible values include: 'Primary', 'Secondary'\n   */\n  serverRole: ReplicationRole;\n}\n\n/**\n * Properties of a linked server to be returned in get/put response\n */\nexport interface RedisLinkedServerProperties extends RedisLinkedServerCreateProperties {\n  /**\n   * Terminal state of the link between primary and secondary redis cache.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly provisioningState?: string;\n}\n\n/**\n * Response to put/get linked server (with properties) for Redis cache.\n */\nexport interface RedisLinkedServerWithProperties extends ProxyResource {\n  /**\n   * Fully qualified resourceId of the linked redis cache.\n   */\n  linkedRedisCacheId: string;\n  /**\n   * Location of the linked redis cache.\n   */\n  linkedRedisCacheLocation: string;\n  /**\n   * Role of the linked server. Possible values include: 'Primary', 'Secondary'\n   */\n  serverRole: ReplicationRole;\n  /**\n   * Terminal state of the link between primary and secondary redis cache.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly provisioningState?: string;\n}\n\n/**\n * Parameter required for creating a linked server to redis cache.\n */\nexport interface RedisLinkedServerCreateParameters {\n  /**\n   * Fully qualified resourceId of the linked redis cache.\n   */\n  linkedRedisCacheId: string;\n  /**\n   * Location of the linked redis cache.\n   */\n  linkedRedisCacheLocation: string;\n  /**\n   * Role of the linked server. Possible values include: 'Primary', 'Secondary'\n   */\n  serverRole: ReplicationRole;\n}\n\n/**\n * The object that describes the operation.\n */\nexport interface OperationDisplay {\n  /**\n   * Friendly name of the resource provider\n   */\n  provider?: string;\n  /**\n   * Operation type: read, write, delete, listKeys/action, etc.\n   */\n  operation?: string;\n  /**\n   * Resource type on which the operation is performed.\n   */\n  resource?: string;\n  /**\n   * Friendly name of the operation\n   */\n  description?: string;\n}\n\n/**\n * REST API operation\n */\nexport interface Operation {\n  /**\n   * Operation name: {provider}/{resource}/{operation}\n   */\n  name?: string;\n  /**\n   * The object that describes the operation.\n   */\n  display?: OperationDisplay;\n}\n\n/**\n * Parameters body to pass for resource name availability check.\n */\nexport interface CheckNameAvailabilityParameters {\n  /**\n   * Resource name.\n   */\n  name: string;\n  /**\n   * Resource type. The only legal value of this property for checking redis cache name\n   * availability is 'Microsoft.Cache/redis'.\n   */\n  type: string;\n}\n\n/**\n * Properties of upgrade notification.\n */\nexport interface UpgradeNotification {\n  /**\n   * Name of upgrade notification.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly name?: string;\n  /**\n   * Timestamp when upgrade notification occurred.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly timestamp?: Date;\n  /**\n   * Details about this upgrade notification\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly upsellNotification?: { [propertyName: string]: string };\n}\n\n/**\n * The response of listUpgradeNotifications.\n */\nexport interface NotificationListResponse {\n  /**\n   * List of all notifications.\n   */\n  value?: UpgradeNotification[];\n  /**\n   * Link for next set of notifications.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly nextLink?: string;\n}\n\n/**\n * An interface representing RedisManagementClientOptions.\n */\nexport interface RedisManagementClientOptions extends AzureServiceClientOptions {\n  baseUri?: string;\n}\n\n/**\n * @interface\n * Result of the request to list REST API operations. It contains a list of operations and a URL\n * nextLink to get the next set of results.\n * @extends Array<Operation>\n */\nexport interface OperationListResult extends Array<Operation> {\n  /**\n   * URL to get the next set of operation list results if there are any.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly nextLink?: string;\n}\n\n/**\n * @interface\n * The response of list Redis operation.\n * @extends Array<RedisResource>\n */\nexport interface RedisListResult extends Array<RedisResource> {\n  /**\n   * Link for next page of results.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly nextLink?: string;\n}\n\n/**\n * @interface\n * The response of list firewall rules Redis operation.\n * @extends Array<RedisFirewallRule>\n */\nexport interface RedisFirewallRuleListResult extends Array<RedisFirewallRule> {\n  /**\n   * Link for next page of results.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly nextLink?: string;\n}\n\n/**\n * @interface\n * The response of list patch schedules Redis operation.\n * @extends Array<RedisPatchSchedule>\n */\nexport interface RedisPatchScheduleListResult extends Array<RedisPatchSchedule> {\n  /**\n   * Link for next page of results.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly nextLink?: string;\n}\n\n/**\n * @interface\n * List of linked servers (with properties) of a Redis cache.\n * @extends Array<RedisLinkedServerWithProperties>\n */\nexport interface RedisLinkedServerWithPropertiesList extends Array<RedisLinkedServerWithProperties> {\n  /**\n   * Link for next set.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly nextLink?: string;\n}\n\n/**\n * Defines values for SkuName.\n * Possible values include: 'Basic', 'Standard', 'Premium'\n * @readonly\n * @enum {string}\n */\nexport type SkuName = 'Basic' | 'Standard' | 'Premium';\n\n/**\n * Defines values for SkuFamily.\n * Possible values include: 'C', 'P'\n * @readonly\n * @enum {string}\n */\nexport type SkuFamily = 'C' | 'P';\n\n/**\n * Defines values for TlsVersion.\n * Possible values include: '1.0', '1.1', '1.2'\n * @readonly\n * @enum {string}\n */\nexport type TlsVersion = '1.0' | '1.1' | '1.2';\n\n/**\n * Defines values for ProvisioningState.\n * Possible values include: 'Creating', 'Deleting', 'Disabled', 'Failed', 'Linking',\n * 'Provisioning', 'RecoveringScaleFailure', 'Scaling', 'Succeeded', 'Unlinking', 'Unprovisioning',\n * 'Updating'\n * @readonly\n * @enum {string}\n */\nexport type ProvisioningState = 'Creating' | 'Deleting' | 'Disabled' | 'Failed' | 'Linking' | 'Provisioning' | 'RecoveringScaleFailure' | 'Scaling' | 'Succeeded' | 'Unlinking' | 'Unprovisioning' | 'Updating';\n\n/**\n * Defines values for RedisKeyType.\n * Possible values include: 'Primary', 'Secondary'\n * @readonly\n * @enum {string}\n */\nexport type RedisKeyType = 'Primary' | 'Secondary';\n\n/**\n * Defines values for RebootType.\n * Possible values include: 'PrimaryNode', 'SecondaryNode', 'AllNodes'\n * @readonly\n * @enum {string}\n */\nexport type RebootType = 'PrimaryNode' | 'SecondaryNode' | 'AllNodes';\n\n/**\n * Defines values for DayOfWeek.\n * Possible values include: 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday',\n * 'Sunday', 'Everyday', 'Weekend'\n * @readonly\n * @enum {string}\n */\nexport type DayOfWeek = 'Monday' | 'Tuesday' | 'Wednesday' | 'Thursday' | 'Friday' | 'Saturday' | 'Sunday' | 'Everyday' | 'Weekend';\n\n/**\n * Defines values for ReplicationRole.\n * Possible values include: 'Primary', 'Secondary'\n * @readonly\n * @enum {string}\n */\nexport type ReplicationRole = 'Primary' | 'Secondary';\n\n/**\n * Contains response data for the list operation.\n */\nexport type OperationsListResponse = OperationListResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: OperationListResult;\n    };\n};\n\n/**\n * Contains response data for the listNext operation.\n */\nexport type OperationsListNextResponse = OperationListResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: OperationListResult;\n    };\n};\n\n/**\n * Contains response data for the listUpgradeNotifications operation.\n */\nexport type RedisListUpgradeNotificationsResponse = NotificationListResponse & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: NotificationListResponse;\n    };\n};\n\n/**\n * Contains response data for the create operation.\n */\nexport type RedisCreateResponse = RedisResource & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: RedisResource;\n    };\n};\n\n/**\n * Contains response data for the update operation.\n */\nexport type RedisUpdateResponse = RedisResource & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: RedisResource;\n    };\n};\n\n/**\n * Contains response data for the get operation.\n */\nexport type RedisGetResponse = RedisResource & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: RedisResource;\n    };\n};\n\n/**\n * Contains response data for the listByResourceGroup operation.\n */\nexport type RedisListByResourceGroupResponse = RedisListResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: RedisListResult;\n    };\n};\n\n/**\n * Contains response data for the list operation.\n */\nexport type RedisListResponse = RedisListResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: RedisListResult;\n    };\n};\n\n/**\n * Contains response data for the listKeys operation.\n */\nexport type RedisListKeysResponse = RedisAccessKeys & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: RedisAccessKeys;\n    };\n};\n\n/**\n * Contains response data for the regenerateKey operation.\n */\nexport type RedisRegenerateKeyResponse = RedisAccessKeys & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: RedisAccessKeys;\n    };\n};\n\n/**\n * Contains response data for the forceReboot operation.\n */\nexport type RedisForceRebootResponse2 = RedisForceRebootResponse & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: RedisForceRebootResponse;\n    };\n};\n\n/**\n * Contains response data for the beginCreate operation.\n */\nexport type RedisBeginCreateResponse = RedisResource & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: RedisResource;\n    };\n};\n\n/**\n * Contains response data for the listByResourceGroupNext operation.\n */\nexport type RedisListByResourceGroupNextResponse = RedisListResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: RedisListResult;\n    };\n};\n\n/**\n * Contains response data for the listNext operation.\n */\nexport type RedisListNextResponse = RedisListResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: RedisListResult;\n    };\n};\n\n/**\n * Contains response data for the listByRedisResource operation.\n */\nexport type FirewallRulesListByRedisResourceResponse = RedisFirewallRuleListResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: RedisFirewallRuleListResult;\n    };\n};\n\n/**\n * Contains response data for the createOrUpdate operation.\n */\nexport type FirewallRulesCreateOrUpdateResponse = RedisFirewallRule & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: RedisFirewallRule;\n    };\n};\n\n/**\n * Contains response data for the get operation.\n */\nexport type FirewallRulesGetResponse = RedisFirewallRule & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: RedisFirewallRule;\n    };\n};\n\n/**\n * Contains response data for the listByRedisResourceNext operation.\n */\nexport type FirewallRulesListByRedisResourceNextResponse = RedisFirewallRuleListResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: RedisFirewallRuleListResult;\n    };\n};\n\n/**\n * Contains response data for the listByRedisResource operation.\n */\nexport type PatchSchedulesListByRedisResourceResponse = RedisPatchScheduleListResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: RedisPatchScheduleListResult;\n    };\n};\n\n/**\n * Contains response data for the createOrUpdate operation.\n */\nexport type PatchSchedulesCreateOrUpdateResponse = RedisPatchSchedule & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: RedisPatchSchedule;\n    };\n};\n\n/**\n * Contains response data for the get operation.\n */\nexport type PatchSchedulesGetResponse = RedisPatchSchedule & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: RedisPatchSchedule;\n    };\n};\n\n/**\n * Contains response data for the listByRedisResourceNext operation.\n */\nexport type PatchSchedulesListByRedisResourceNextResponse = RedisPatchScheduleListResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: RedisPatchScheduleListResult;\n    };\n};\n\n/**\n * Contains response data for the create operation.\n */\nexport type LinkedServerCreateResponse = RedisLinkedServerWithProperties & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: RedisLinkedServerWithProperties;\n    };\n};\n\n/**\n * Contains response data for the get operation.\n */\nexport type LinkedServerGetResponse = RedisLinkedServerWithProperties & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: RedisLinkedServerWithProperties;\n    };\n};\n\n/**\n * Contains response data for the list operation.\n */\nexport type LinkedServerListResponse = RedisLinkedServerWithPropertiesList & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: RedisLinkedServerWithPropertiesList;\n    };\n};\n\n/**\n * Contains response data for the beginCreate operation.\n */\nexport type LinkedServerBeginCreateResponse = RedisLinkedServerWithProperties & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: RedisLinkedServerWithProperties;\n    };\n};\n\n/**\n * Contains response data for the listNext operation.\n */\nexport type LinkedServerListNextResponse = RedisLinkedServerWithPropertiesList & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: RedisLinkedServerWithPropertiesList;\n    };\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { CloudErrorMapper, BaseResourceMapper } from \"@azure/ms-rest-azure-js\";\nimport * as msRest from \"@azure/ms-rest-js\";\n\nexport const CloudError = CloudErrorMapper;\nexport const BaseResource = BaseResourceMapper;\n\nexport const Sku: msRest.CompositeMapper = {\n  serializedName: \"Sku\",\n  type: {\n    name: \"Composite\",\n    className: \"Sku\",\n    modelProperties: {\n      name: {\n        required: true,\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      family: {\n        required: true,\n        serializedName: \"family\",\n        type: {\n          name: \"String\"\n        }\n      },\n      capacity: {\n        required: true,\n        serializedName: \"capacity\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const RedisAccessKeys: msRest.CompositeMapper = {\n  serializedName: \"RedisAccessKeys\",\n  type: {\n    name: \"Composite\",\n    className: \"RedisAccessKeys\",\n    modelProperties: {\n      primaryKey: {\n        readOnly: true,\n        serializedName: \"primaryKey\",\n        type: {\n          name: \"String\"\n        }\n      },\n      secondaryKey: {\n        readOnly: true,\n        serializedName: \"secondaryKey\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RedisLinkedServer: msRest.CompositeMapper = {\n  serializedName: \"RedisLinkedServer\",\n  type: {\n    name: \"Composite\",\n    className: \"RedisLinkedServer\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RedisInstanceDetails: msRest.CompositeMapper = {\n  serializedName: \"RedisInstanceDetails\",\n  type: {\n    name: \"Composite\",\n    className: \"RedisInstanceDetails\",\n    modelProperties: {\n      sslPort: {\n        readOnly: true,\n        serializedName: \"sslPort\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      nonSslPort: {\n        readOnly: true,\n        serializedName: \"nonSslPort\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      zone: {\n        readOnly: true,\n        serializedName: \"zone\",\n        type: {\n          name: \"String\"\n        }\n      },\n      shardId: {\n        readOnly: true,\n        serializedName: \"shardId\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      isMaster: {\n        readOnly: true,\n        serializedName: \"isMaster\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const Resource: msRest.CompositeMapper = {\n  serializedName: \"Resource\",\n  type: {\n    name: \"Composite\",\n    className: \"Resource\",\n    modelProperties: {\n      id: {\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        readOnly: true,\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        readOnly: true,\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ProxyResource: msRest.CompositeMapper = {\n  serializedName: \"ProxyResource\",\n  type: {\n    name: \"Composite\",\n    className: \"ProxyResource\",\n    modelProperties: {\n      ...Resource.type.modelProperties\n    }\n  }\n};\n\nexport const TrackedResource: msRest.CompositeMapper = {\n  serializedName: \"TrackedResource\",\n  type: {\n    name: \"Composite\",\n    className: \"TrackedResource\",\n    modelProperties: {\n      ...Resource.type.modelProperties,\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      location: {\n        required: true,\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RedisCreateParameters: msRest.CompositeMapper = {\n  serializedName: \"RedisCreateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"RedisCreateParameters\",\n    modelProperties: {\n      redisConfiguration: {\n        serializedName: \"properties.redisConfiguration\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      enableNonSslPort: {\n        serializedName: \"properties.enableNonSslPort\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      replicasPerMaster: {\n        serializedName: \"properties.replicasPerMaster\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      tenantSettings: {\n        serializedName: \"properties.tenantSettings\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      shardCount: {\n        serializedName: \"properties.shardCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      minimumTlsVersion: {\n        serializedName: \"properties.minimumTlsVersion\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sku: {\n        required: true,\n        serializedName: \"properties.sku\",\n        type: {\n          name: \"Composite\",\n          className: \"Sku\"\n        }\n      },\n      subnetId: {\n        serializedName: \"properties.subnetId\",\n        constraints: {\n          Pattern: /^\\/subscriptions\\/[^\\/]*\\/resourceGroups\\/[^\\/]*\\/providers\\/Microsoft.(ClassicNetwork|Network)\\/virtualNetworks\\/[^\\/]*\\/subnets\\/[^\\/]*$/\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      staticIP: {\n        serializedName: \"properties.staticIP\",\n        constraints: {\n          Pattern: /^\\d+\\.\\d+\\.\\d+\\.\\d+$/\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      zones: {\n        serializedName: \"zones\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      location: {\n        required: true,\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const RedisUpdateParameters: msRest.CompositeMapper = {\n  serializedName: \"RedisUpdateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"RedisUpdateParameters\",\n    modelProperties: {\n      redisConfiguration: {\n        serializedName: \"properties.redisConfiguration\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      enableNonSslPort: {\n        serializedName: \"properties.enableNonSslPort\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      replicasPerMaster: {\n        serializedName: \"properties.replicasPerMaster\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      tenantSettings: {\n        serializedName: \"properties.tenantSettings\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      shardCount: {\n        serializedName: \"properties.shardCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      minimumTlsVersion: {\n        serializedName: \"properties.minimumTlsVersion\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sku: {\n        serializedName: \"properties.sku\",\n        type: {\n          name: \"Composite\",\n          className: \"Sku\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const RedisFirewallRuleProperties: msRest.CompositeMapper = {\n  serializedName: \"RedisFirewallRuleProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"RedisFirewallRuleProperties\",\n    modelProperties: {\n      startIP: {\n        required: true,\n        serializedName: \"startIP\",\n        type: {\n          name: \"String\"\n        }\n      },\n      endIP: {\n        required: true,\n        serializedName: \"endIP\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RedisFirewallRule: msRest.CompositeMapper = {\n  serializedName: \"RedisFirewallRule\",\n  type: {\n    name: \"Composite\",\n    className: \"RedisFirewallRule\",\n    modelProperties: {\n      ...ProxyResource.type.modelProperties,\n      startIP: {\n        required: true,\n        serializedName: \"properties.startIP\",\n        type: {\n          name: \"String\"\n        }\n      },\n      endIP: {\n        required: true,\n        serializedName: \"properties.endIP\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RedisFirewallRuleCreateParameters: msRest.CompositeMapper = {\n  serializedName: \"RedisFirewallRuleCreateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"RedisFirewallRuleCreateParameters\",\n    modelProperties: {\n      startIP: {\n        required: true,\n        serializedName: \"properties.startIP\",\n        type: {\n          name: \"String\"\n        }\n      },\n      endIP: {\n        required: true,\n        serializedName: \"properties.endIP\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RedisResource: msRest.CompositeMapper = {\n  serializedName: \"RedisResource\",\n  type: {\n    name: \"Composite\",\n    className: \"RedisResource\",\n    modelProperties: {\n      ...TrackedResource.type.modelProperties,\n      redisConfiguration: {\n        serializedName: \"properties.redisConfiguration\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      enableNonSslPort: {\n        serializedName: \"properties.enableNonSslPort\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      replicasPerMaster: {\n        serializedName: \"properties.replicasPerMaster\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      tenantSettings: {\n        serializedName: \"properties.tenantSettings\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      shardCount: {\n        serializedName: \"properties.shardCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      minimumTlsVersion: {\n        serializedName: \"properties.minimumTlsVersion\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sku: {\n        required: true,\n        serializedName: \"properties.sku\",\n        type: {\n          name: \"Composite\",\n          className: \"Sku\"\n        }\n      },\n      subnetId: {\n        serializedName: \"properties.subnetId\",\n        constraints: {\n          Pattern: /^\\/subscriptions\\/[^\\/]*\\/resourceGroups\\/[^\\/]*\\/providers\\/Microsoft.(ClassicNetwork|Network)\\/virtualNetworks\\/[^\\/]*\\/subnets\\/[^\\/]*$/\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      staticIP: {\n        serializedName: \"properties.staticIP\",\n        constraints: {\n          Pattern: /^\\d+\\.\\d+\\.\\d+\\.\\d+$/\n        },\n        type: {\n          name: \"String\"\n        }\n      },\n      redisVersion: {\n        readOnly: true,\n        serializedName: \"properties.redisVersion\",\n        type: {\n          name: \"String\"\n        }\n      },\n      provisioningState: {\n        readOnly: true,\n        serializedName: \"properties.provisioningState\",\n        type: {\n          name: \"String\"\n        }\n      },\n      hostName: {\n        readOnly: true,\n        serializedName: \"properties.hostName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      port: {\n        readOnly: true,\n        serializedName: \"properties.port\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      sslPort: {\n        readOnly: true,\n        serializedName: \"properties.sslPort\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      accessKeys: {\n        readOnly: true,\n        serializedName: \"properties.accessKeys\",\n        type: {\n          name: \"Composite\",\n          className: \"RedisAccessKeys\"\n        }\n      },\n      linkedServers: {\n        readOnly: true,\n        serializedName: \"properties.linkedServers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"RedisLinkedServer\"\n            }\n          }\n        }\n      },\n      instances: {\n        readOnly: true,\n        serializedName: \"properties.instances\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"RedisInstanceDetails\"\n            }\n          }\n        }\n      },\n      zones: {\n        serializedName: \"zones\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const RedisRegenerateKeyParameters: msRest.CompositeMapper = {\n  serializedName: \"RedisRegenerateKeyParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"RedisRegenerateKeyParameters\",\n    modelProperties: {\n      keyType: {\n        required: true,\n        serializedName: \"keyType\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Primary\",\n            \"Secondary\"\n          ]\n        }\n      }\n    }\n  }\n};\n\nexport const RedisRebootParameters: msRest.CompositeMapper = {\n  serializedName: \"RedisRebootParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"RedisRebootParameters\",\n    modelProperties: {\n      rebootType: {\n        serializedName: \"rebootType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      shardId: {\n        serializedName: \"shardId\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      ports: {\n        serializedName: \"ports\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Number\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ExportRDBParameters: msRest.CompositeMapper = {\n  serializedName: \"ExportRDBParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"ExportRDBParameters\",\n    modelProperties: {\n      format: {\n        serializedName: \"format\",\n        type: {\n          name: \"String\"\n        }\n      },\n      prefix: {\n        required: true,\n        serializedName: \"prefix\",\n        type: {\n          name: \"String\"\n        }\n      },\n      container: {\n        required: true,\n        serializedName: \"container\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ImportRDBParameters: msRest.CompositeMapper = {\n  serializedName: \"ImportRDBParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"ImportRDBParameters\",\n    modelProperties: {\n      format: {\n        serializedName: \"format\",\n        type: {\n          name: \"String\"\n        }\n      },\n      files: {\n        required: true,\n        serializedName: \"files\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ScheduleEntry: msRest.CompositeMapper = {\n  serializedName: \"ScheduleEntry\",\n  type: {\n    name: \"Composite\",\n    className: \"ScheduleEntry\",\n    modelProperties: {\n      dayOfWeek: {\n        required: true,\n        serializedName: \"dayOfWeek\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Monday\",\n            \"Tuesday\",\n            \"Wednesday\",\n            \"Thursday\",\n            \"Friday\",\n            \"Saturday\",\n            \"Sunday\",\n            \"Everyday\",\n            \"Weekend\"\n          ]\n        }\n      },\n      startHourUtc: {\n        required: true,\n        serializedName: \"startHourUtc\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      maintenanceWindow: {\n        serializedName: \"maintenanceWindow\",\n        type: {\n          name: \"TimeSpan\"\n        }\n      }\n    }\n  }\n};\n\nexport const ScheduleEntries: msRest.CompositeMapper = {\n  serializedName: \"ScheduleEntries\",\n  type: {\n    name: \"Composite\",\n    className: \"ScheduleEntries\",\n    modelProperties: {\n      scheduleEntries: {\n        required: true,\n        serializedName: \"scheduleEntries\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ScheduleEntry\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const RedisPatchSchedule: msRest.CompositeMapper = {\n  serializedName: \"RedisPatchSchedule\",\n  type: {\n    name: \"Composite\",\n    className: \"RedisPatchSchedule\",\n    modelProperties: {\n      ...ProxyResource.type.modelProperties,\n      scheduleEntries: {\n        required: true,\n        serializedName: \"properties.scheduleEntries\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ScheduleEntry\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const RedisForceRebootResponse: msRest.CompositeMapper = {\n  serializedName: \"RedisForceRebootResponse\",\n  type: {\n    name: \"Composite\",\n    className: \"RedisForceRebootResponse\",\n    modelProperties: {\n      message: {\n        readOnly: true,\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RedisLinkedServerCreateProperties: msRest.CompositeMapper = {\n  serializedName: \"RedisLinkedServerCreateProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"RedisLinkedServerCreateProperties\",\n    modelProperties: {\n      linkedRedisCacheId: {\n        required: true,\n        serializedName: \"linkedRedisCacheId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      linkedRedisCacheLocation: {\n        required: true,\n        serializedName: \"linkedRedisCacheLocation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      serverRole: {\n        required: true,\n        serializedName: \"serverRole\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Primary\",\n            \"Secondary\"\n          ]\n        }\n      }\n    }\n  }\n};\n\nexport const RedisLinkedServerProperties: msRest.CompositeMapper = {\n  serializedName: \"RedisLinkedServerProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"RedisLinkedServerProperties\",\n    modelProperties: {\n      ...RedisLinkedServerCreateProperties.type.modelProperties,\n      provisioningState: {\n        readOnly: true,\n        serializedName: \"provisioningState\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RedisLinkedServerWithProperties: msRest.CompositeMapper = {\n  serializedName: \"RedisLinkedServerWithProperties\",\n  type: {\n    name: \"Composite\",\n    className: \"RedisLinkedServerWithProperties\",\n    modelProperties: {\n      ...ProxyResource.type.modelProperties,\n      linkedRedisCacheId: {\n        required: true,\n        serializedName: \"properties.linkedRedisCacheId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      linkedRedisCacheLocation: {\n        required: true,\n        serializedName: \"properties.linkedRedisCacheLocation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      serverRole: {\n        required: true,\n        serializedName: \"properties.serverRole\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Primary\",\n            \"Secondary\"\n          ]\n        }\n      },\n      provisioningState: {\n        readOnly: true,\n        serializedName: \"properties.provisioningState\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RedisLinkedServerCreateParameters: msRest.CompositeMapper = {\n  serializedName: \"RedisLinkedServerCreateParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"RedisLinkedServerCreateParameters\",\n    modelProperties: {\n      linkedRedisCacheId: {\n        required: true,\n        serializedName: \"properties.linkedRedisCacheId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      linkedRedisCacheLocation: {\n        required: true,\n        serializedName: \"properties.linkedRedisCacheLocation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      serverRole: {\n        required: true,\n        serializedName: \"properties.serverRole\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"Primary\",\n            \"Secondary\"\n          ]\n        }\n      }\n    }\n  }\n};\n\nexport const OperationDisplay: msRest.CompositeMapper = {\n  serializedName: \"Operation_display\",\n  type: {\n    name: \"Composite\",\n    className: \"OperationDisplay\",\n    modelProperties: {\n      provider: {\n        serializedName: \"provider\",\n        type: {\n          name: \"String\"\n        }\n      },\n      operation: {\n        serializedName: \"operation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      resource: {\n        serializedName: \"resource\",\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Operation: msRest.CompositeMapper = {\n  serializedName: \"Operation\",\n  type: {\n    name: \"Composite\",\n    className: \"Operation\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      display: {\n        serializedName: \"display\",\n        type: {\n          name: \"Composite\",\n          className: \"OperationDisplay\"\n        }\n      }\n    }\n  }\n};\n\nexport const CheckNameAvailabilityParameters: msRest.CompositeMapper = {\n  serializedName: \"CheckNameAvailabilityParameters\",\n  type: {\n    name: \"Composite\",\n    className: \"CheckNameAvailabilityParameters\",\n    modelProperties: {\n      name: {\n        required: true,\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        required: true,\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const UpgradeNotification: msRest.CompositeMapper = {\n  serializedName: \"UpgradeNotification\",\n  type: {\n    name: \"Composite\",\n    className: \"UpgradeNotification\",\n    modelProperties: {\n      name: {\n        readOnly: true,\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      timestamp: {\n        readOnly: true,\n        serializedName: \"timestamp\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      upsellNotification: {\n        readOnly: true,\n        serializedName: \"upsellNotification\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const NotificationListResponse: msRest.CompositeMapper = {\n  serializedName: \"NotificationListResponse\",\n  type: {\n    name: \"Composite\",\n    className: \"NotificationListResponse\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"UpgradeNotification\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OperationListResult: msRest.CompositeMapper = {\n  serializedName: \"OperationListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"OperationListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Operation\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RedisListResult: msRest.CompositeMapper = {\n  serializedName: \"RedisListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"RedisListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"RedisResource\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RedisFirewallRuleListResult: msRest.CompositeMapper = {\n  serializedName: \"RedisFirewallRuleListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"RedisFirewallRuleListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"RedisFirewallRule\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RedisPatchScheduleListResult: msRest.CompositeMapper = {\n  serializedName: \"RedisPatchScheduleListResult\",\n  type: {\n    name: \"Composite\",\n    className: \"RedisPatchScheduleListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"RedisPatchSchedule\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RedisLinkedServerWithPropertiesList: msRest.CompositeMapper = {\n  serializedName: \"RedisLinkedServerWithPropertiesList\",\n  type: {\n    name: \"Composite\",\n    className: \"RedisLinkedServerWithPropertiesList\",\n    modelProperties: {\n      value: {\n        serializedName: \"\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"RedisLinkedServerWithProperties\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        readOnly: true,\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nexport {\n  CloudError,\n  Operation,\n  OperationDisplay,\n  OperationListResult\n} from \"../models/mappers\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\nexport const acceptLanguage: msRest.OperationParameter = {\n  parameterPath: \"acceptLanguage\",\n  mapper: {\n    serializedName: \"accept-language\",\n    defaultValue: 'en-US',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const apiVersion: msRest.OperationQueryParameter = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    required: true,\n    serializedName: \"api-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const cacheName: msRest.OperationURLParameter = {\n  parameterPath: \"cacheName\",\n  mapper: {\n    required: true,\n    serializedName: \"cacheName\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const defaultParameter: msRest.OperationURLParameter = {\n  parameterPath: \"defaultParameter\",\n  mapper: {\n    required: true,\n    isConstant: true,\n    serializedName: \"default\",\n    defaultValue: 'default',\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const history: msRest.OperationQueryParameter = {\n  parameterPath: \"history\",\n  mapper: {\n    required: true,\n    serializedName: \"history\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const linkedServerName: msRest.OperationURLParameter = {\n  parameterPath: \"linkedServerName\",\n  mapper: {\n    required: true,\n    serializedName: \"linkedServerName\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const name: msRest.OperationURLParameter = {\n  parameterPath: \"name\",\n  mapper: {\n    required: true,\n    serializedName: \"name\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const nextPageLink: msRest.OperationURLParameter = {\n  parameterPath: \"nextPageLink\",\n  mapper: {\n    required: true,\n    serializedName: \"nextLink\",\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\nexport const resourceGroupName: msRest.OperationURLParameter = {\n  parameterPath: \"resourceGroupName\",\n  mapper: {\n    required: true,\n    serializedName: \"resourceGroupName\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const ruleName: msRest.OperationURLParameter = {\n  parameterPath: \"ruleName\",\n  mapper: {\n    required: true,\n    serializedName: \"ruleName\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const subscriptionId: msRest.OperationURLParameter = {\n  parameterPath: \"subscriptionId\",\n  mapper: {\n    required: true,\n    serializedName: \"subscriptionId\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/operationsMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { RedisManagementClientContext } from \"../redisManagementClientContext\";\n\n/** Class representing a Operations. */\nexport class Operations {\n  private readonly client: RedisManagementClientContext;\n\n  /**\n   * Create a Operations.\n   * @param {RedisManagementClientContext} client Reference to the service client.\n   */\n  constructor(client: RedisManagementClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Lists all of the available REST API operations of the Microsoft.Cache provider.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.OperationsListResponse>\n   */\n  list(options?: msRest.RequestOptionsBase): Promise<Models.OperationsListResponse>;\n  /**\n   * @param callback The callback\n   */\n  list(callback: msRest.ServiceCallback<Models.OperationListResult>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationListResult>): void;\n  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationListResult>, callback?: msRest.ServiceCallback<Models.OperationListResult>): Promise<Models.OperationsListResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      listOperationSpec,\n      callback) as Promise<Models.OperationsListResponse>;\n  }\n\n  /**\n   * Lists all of the available REST API operations of the Microsoft.Cache provider.\n   * @param nextPageLink The NextLink from the previous successful call to List operation.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.OperationsListNextResponse>\n   */\n  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.OperationsListNextResponse>;\n  /**\n   * @param nextPageLink The NextLink from the previous successful call to List operation.\n   * @param callback The callback\n   */\n  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.OperationListResult>): void;\n  /**\n   * @param nextPageLink The NextLink from the previous successful call to List operation.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationListResult>): void;\n  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationListResult>, callback?: msRest.ServiceCallback<Models.OperationListResult>): Promise<Models.OperationsListNextResponse> {\n    return this.client.sendOperationRequest(\n      {\n        nextPageLink,\n        options\n      },\n      listNextOperationSpec,\n      callback) as Promise<Models.OperationsListNextResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new msRest.Serializer(Mappers);\nconst listOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"providers/Microsoft.Cache/operations\",\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.OperationListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n\nconst listNextOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  baseUrl: \"https://management.azure.com\",\n  path: \"{nextLink}\",\n  urlParameters: [\n    Parameters.nextPageLink\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.OperationListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nexport {\n  BaseResource,\n  CheckNameAvailabilityParameters,\n  CloudError,\n  ExportRDBParameters,\n  ImportRDBParameters,\n  NotificationListResponse,\n  ProxyResource,\n  RedisAccessKeys,\n  RedisCreateParameters,\n  RedisFirewallRule,\n  RedisForceRebootResponse,\n  RedisInstanceDetails,\n  RedisLinkedServer,\n  RedisLinkedServerWithProperties,\n  RedisListResult,\n  RedisPatchSchedule,\n  RedisRebootParameters,\n  RedisRegenerateKeyParameters,\n  RedisResource,\n  RedisUpdateParameters,\n  Resource,\n  ScheduleEntry,\n  Sku,\n  TrackedResource,\n  UpgradeNotification\n} from \"../models/mappers\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as msRestAzure from \"@azure/ms-rest-azure-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/redisMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { RedisManagementClientContext } from \"../redisManagementClientContext\";\n\n/** Class representing a Redis. */\nexport class Redis {\n  private readonly client: RedisManagementClientContext;\n\n  /**\n   * Create a Redis.\n   * @param {RedisManagementClientContext} client Reference to the service client.\n   */\n  constructor(client: RedisManagementClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Checks that the redis cache name is valid and is not already in use.\n   * @param parameters Parameters supplied to the CheckNameAvailability Redis operation. The only\n   * supported resource type is 'Microsoft.Cache/redis'\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  checkNameAvailability(parameters: Models.CheckNameAvailabilityParameters, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;\n  /**\n   * @param parameters Parameters supplied to the CheckNameAvailability Redis operation. The only\n   * supported resource type is 'Microsoft.Cache/redis'\n   * @param callback The callback\n   */\n  checkNameAvailability(parameters: Models.CheckNameAvailabilityParameters, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param parameters Parameters supplied to the CheckNameAvailability Redis operation. The only\n   * supported resource type is 'Microsoft.Cache/redis'\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  checkNameAvailability(parameters: Models.CheckNameAvailabilityParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  checkNameAvailability(parameters: Models.CheckNameAvailabilityParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        parameters,\n        options\n      },\n      checkNameAvailabilityOperationSpec,\n      callback);\n  }\n\n  /**\n   * Gets any upgrade notifications for a Redis cache.\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param history how many minutes in past to look for upgrade notifications\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RedisListUpgradeNotificationsResponse>\n   */\n  listUpgradeNotifications(resourceGroupName: string, name: string, history: number, options?: msRest.RequestOptionsBase): Promise<Models.RedisListUpgradeNotificationsResponse>;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param history how many minutes in past to look for upgrade notifications\n   * @param callback The callback\n   */\n  listUpgradeNotifications(resourceGroupName: string, name: string, history: number, callback: msRest.ServiceCallback<Models.NotificationListResponse>): void;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param history how many minutes in past to look for upgrade notifications\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listUpgradeNotifications(resourceGroupName: string, name: string, history: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NotificationListResponse>): void;\n  listUpgradeNotifications(resourceGroupName: string, name: string, history: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NotificationListResponse>, callback?: msRest.ServiceCallback<Models.NotificationListResponse>): Promise<Models.RedisListUpgradeNotificationsResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        name,\n        history,\n        options\n      },\n      listUpgradeNotificationsOperationSpec,\n      callback) as Promise<Models.RedisListUpgradeNotificationsResponse>;\n  }\n\n  /**\n   * Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param parameters Parameters supplied to the Create Redis operation.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RedisCreateResponse>\n   */\n  create(resourceGroupName: string, name: string, parameters: Models.RedisCreateParameters, options?: msRest.RequestOptionsBase): Promise<Models.RedisCreateResponse> {\n    return this.beginCreate(resourceGroupName,name,parameters,options)\n      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.RedisCreateResponse>;\n  }\n\n  /**\n   * Update an existing Redis cache.\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param parameters Parameters supplied to the Update Redis operation.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RedisUpdateResponse>\n   */\n  update(resourceGroupName: string, name: string, parameters: Models.RedisUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.RedisUpdateResponse>;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param parameters Parameters supplied to the Update Redis operation.\n   * @param callback The callback\n   */\n  update(resourceGroupName: string, name: string, parameters: Models.RedisUpdateParameters, callback: msRest.ServiceCallback<Models.RedisResource>): void;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param parameters Parameters supplied to the Update Redis operation.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  update(resourceGroupName: string, name: string, parameters: Models.RedisUpdateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisResource>): void;\n  update(resourceGroupName: string, name: string, parameters: Models.RedisUpdateParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RedisResource>, callback?: msRest.ServiceCallback<Models.RedisResource>): Promise<Models.RedisUpdateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        name,\n        parameters,\n        options\n      },\n      updateOperationSpec,\n      callback) as Promise<Models.RedisUpdateResponse>;\n  }\n\n  /**\n   * Deletes a Redis cache.\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  deleteMethod(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {\n    return this.beginDeleteMethod(resourceGroupName,name,options)\n      .then(lroPoller => lroPoller.pollUntilFinished());\n  }\n\n  /**\n   * Gets a Redis cache (resource description).\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RedisGetResponse>\n   */\n  get(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.RedisGetResponse>;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param callback The callback\n   */\n  get(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.RedisResource>): void;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  get(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisResource>): void;\n  get(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RedisResource>, callback?: msRest.ServiceCallback<Models.RedisResource>): Promise<Models.RedisGetResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        name,\n        options\n      },\n      getOperationSpec,\n      callback) as Promise<Models.RedisGetResponse>;\n  }\n\n  /**\n   * Lists all Redis caches in a resource group.\n   * @param resourceGroupName The name of the resource group.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RedisListByResourceGroupResponse>\n   */\n  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.RedisListByResourceGroupResponse>;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param callback The callback\n   */\n  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.RedisListResult>): void;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisListResult>): void;\n  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RedisListResult>, callback?: msRest.ServiceCallback<Models.RedisListResult>): Promise<Models.RedisListByResourceGroupResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        options\n      },\n      listByResourceGroupOperationSpec,\n      callback) as Promise<Models.RedisListByResourceGroupResponse>;\n  }\n\n  /**\n   * Gets all Redis caches in the specified subscription.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RedisListResponse>\n   */\n  list(options?: msRest.RequestOptionsBase): Promise<Models.RedisListResponse>;\n  /**\n   * @param callback The callback\n   */\n  list(callback: msRest.ServiceCallback<Models.RedisListResult>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisListResult>): void;\n  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RedisListResult>, callback?: msRest.ServiceCallback<Models.RedisListResult>): Promise<Models.RedisListResponse> {\n    return this.client.sendOperationRequest(\n      {\n        options\n      },\n      listOperationSpec,\n      callback) as Promise<Models.RedisListResponse>;\n  }\n\n  /**\n   * Retrieve a Redis cache's access keys. This operation requires write permission to the cache\n   * resource.\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RedisListKeysResponse>\n   */\n  listKeys(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.RedisListKeysResponse>;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param callback The callback\n   */\n  listKeys(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.RedisAccessKeys>): void;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listKeys(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisAccessKeys>): void;\n  listKeys(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RedisAccessKeys>, callback?: msRest.ServiceCallback<Models.RedisAccessKeys>): Promise<Models.RedisListKeysResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        name,\n        options\n      },\n      listKeysOperationSpec,\n      callback) as Promise<Models.RedisListKeysResponse>;\n  }\n\n  /**\n   * Regenerate Redis cache's access keys. This operation requires write permission to the cache\n   * resource.\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param keyType The Redis access key to regenerate. Possible values include: 'Primary',\n   * 'Secondary'\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RedisRegenerateKeyResponse>\n   */\n  regenerateKey(resourceGroupName: string, name: string, keyType: Models.RedisKeyType, options?: msRest.RequestOptionsBase): Promise<Models.RedisRegenerateKeyResponse>;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param keyType The Redis access key to regenerate. Possible values include: 'Primary',\n   * 'Secondary'\n   * @param callback The callback\n   */\n  regenerateKey(resourceGroupName: string, name: string, keyType: Models.RedisKeyType, callback: msRest.ServiceCallback<Models.RedisAccessKeys>): void;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param keyType The Redis access key to regenerate. Possible values include: 'Primary',\n   * 'Secondary'\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  regenerateKey(resourceGroupName: string, name: string, keyType: Models.RedisKeyType, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisAccessKeys>): void;\n  regenerateKey(resourceGroupName: string, name: string, keyType: Models.RedisKeyType, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RedisAccessKeys>, callback?: msRest.ServiceCallback<Models.RedisAccessKeys>): Promise<Models.RedisRegenerateKeyResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        name,\n        keyType,\n        options\n      },\n      regenerateKeyOperationSpec,\n      callback) as Promise<Models.RedisRegenerateKeyResponse>;\n  }\n\n  /**\n   * Reboot specified Redis node(s). This operation requires write permission to the cache resource.\n   * There can be potential data loss.\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param parameters Specifies which Redis node(s) to reboot.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RedisForceRebootResponse2>\n   */\n  forceReboot(resourceGroupName: string, name: string, parameters: Models.RedisRebootParameters, options?: msRest.RequestOptionsBase): Promise<Models.RedisForceRebootResponse2>;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param parameters Specifies which Redis node(s) to reboot.\n   * @param callback The callback\n   */\n  forceReboot(resourceGroupName: string, name: string, parameters: Models.RedisRebootParameters, callback: msRest.ServiceCallback<Models.RedisForceRebootResponse>): void;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param parameters Specifies which Redis node(s) to reboot.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  forceReboot(resourceGroupName: string, name: string, parameters: Models.RedisRebootParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisForceRebootResponse>): void;\n  forceReboot(resourceGroupName: string, name: string, parameters: Models.RedisRebootParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RedisForceRebootResponse>, callback?: msRest.ServiceCallback<Models.RedisForceRebootResponse>): Promise<Models.RedisForceRebootResponse2> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        name,\n        parameters,\n        options\n      },\n      forceRebootOperationSpec,\n      callback) as Promise<Models.RedisForceRebootResponse2>;\n  }\n\n  /**\n   * Import data into Redis cache.\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param parameters Parameters for Redis import operation.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  importData(resourceGroupName: string, name: string, parameters: Models.ImportRDBParameters, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {\n    return this.beginImportData(resourceGroupName,name,parameters,options)\n      .then(lroPoller => lroPoller.pollUntilFinished());\n  }\n\n  /**\n   * Export data from the redis cache to blobs in a container.\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param parameters Parameters for Redis export operation.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  exportData(resourceGroupName: string, name: string, parameters: Models.ExportRDBParameters, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {\n    return this.beginExportData(resourceGroupName,name,parameters,options)\n      .then(lroPoller => lroPoller.pollUntilFinished());\n  }\n\n  /**\n   * Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param parameters Parameters supplied to the Create Redis operation.\n   * @param [options] The optional parameters\n   * @returns Promise<msRestAzure.LROPoller>\n   */\n  beginCreate(resourceGroupName: string, name: string, parameters: Models.RedisCreateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {\n    return this.client.sendLRORequest(\n      {\n        resourceGroupName,\n        name,\n        parameters,\n        options\n      },\n      beginCreateOperationSpec,\n      options);\n  }\n\n  /**\n   * Deletes a Redis cache.\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param [options] The optional parameters\n   * @returns Promise<msRestAzure.LROPoller>\n   */\n  beginDeleteMethod(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {\n    return this.client.sendLRORequest(\n      {\n        resourceGroupName,\n        name,\n        options\n      },\n      beginDeleteMethodOperationSpec,\n      options);\n  }\n\n  /**\n   * Import data into Redis cache.\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param parameters Parameters for Redis import operation.\n   * @param [options] The optional parameters\n   * @returns Promise<msRestAzure.LROPoller>\n   */\n  beginImportData(resourceGroupName: string, name: string, parameters: Models.ImportRDBParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {\n    return this.client.sendLRORequest(\n      {\n        resourceGroupName,\n        name,\n        parameters,\n        options\n      },\n      beginImportDataOperationSpec,\n      options);\n  }\n\n  /**\n   * Export data from the redis cache to blobs in a container.\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param parameters Parameters for Redis export operation.\n   * @param [options] The optional parameters\n   * @returns Promise<msRestAzure.LROPoller>\n   */\n  beginExportData(resourceGroupName: string, name: string, parameters: Models.ExportRDBParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {\n    return this.client.sendLRORequest(\n      {\n        resourceGroupName,\n        name,\n        parameters,\n        options\n      },\n      beginExportDataOperationSpec,\n      options);\n  }\n\n  /**\n   * Lists all Redis caches in a resource group.\n   * @param nextPageLink The NextLink from the previous successful call to List operation.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RedisListByResourceGroupNextResponse>\n   */\n  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.RedisListByResourceGroupNextResponse>;\n  /**\n   * @param nextPageLink The NextLink from the previous successful call to List operation.\n   * @param callback The callback\n   */\n  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RedisListResult>): void;\n  /**\n   * @param nextPageLink The NextLink from the previous successful call to List operation.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisListResult>): void;\n  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RedisListResult>, callback?: msRest.ServiceCallback<Models.RedisListResult>): Promise<Models.RedisListByResourceGroupNextResponse> {\n    return this.client.sendOperationRequest(\n      {\n        nextPageLink,\n        options\n      },\n      listByResourceGroupNextOperationSpec,\n      callback) as Promise<Models.RedisListByResourceGroupNextResponse>;\n  }\n\n  /**\n   * Gets all Redis caches in the specified subscription.\n   * @param nextPageLink The NextLink from the previous successful call to List operation.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RedisListNextResponse>\n   */\n  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.RedisListNextResponse>;\n  /**\n   * @param nextPageLink The NextLink from the previous successful call to List operation.\n   * @param callback The callback\n   */\n  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RedisListResult>): void;\n  /**\n   * @param nextPageLink The NextLink from the previous successful call to List operation.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisListResult>): void;\n  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RedisListResult>, callback?: msRest.ServiceCallback<Models.RedisListResult>): Promise<Models.RedisListNextResponse> {\n    return this.client.sendOperationRequest(\n      {\n        nextPageLink,\n        options\n      },\n      listNextOperationSpec,\n      callback) as Promise<Models.RedisListNextResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new msRest.Serializer(Mappers);\nconst checkNameAvailabilityOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"subscriptions/{subscriptionId}/providers/Microsoft.Cache/CheckNameAvailability\",\n  urlParameters: [\n    Parameters.subscriptionId\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  requestBody: {\n    parameterPath: \"parameters\",\n    mapper: {\n      ...Mappers.CheckNameAvailabilityParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n\nconst listUpgradeNotificationsOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/listUpgradeNotifications\",\n  urlParameters: [\n    Parameters.resourceGroupName,\n    Parameters.name,\n    Parameters.subscriptionId\n  ],\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.history\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.NotificationListResponse\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n\nconst updateOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}\",\n  urlParameters: [\n    Parameters.resourceGroupName,\n    Parameters.name,\n    Parameters.subscriptionId\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  requestBody: {\n    parameterPath: \"parameters\",\n    mapper: {\n      ...Mappers.RedisUpdateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.RedisResource\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n\nconst getOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}\",\n  urlParameters: [\n    Parameters.resourceGroupName,\n    Parameters.name,\n    Parameters.subscriptionId\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.RedisResource\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n\nconst listByResourceGroupOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis\",\n  urlParameters: [\n    Parameters.resourceGroupName,\n    Parameters.subscriptionId\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.RedisListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n\nconst listOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"subscriptions/{subscriptionId}/providers/Microsoft.Cache/Redis\",\n  urlParameters: [\n    Parameters.subscriptionId\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.RedisListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n\nconst listKeysOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/listKeys\",\n  urlParameters: [\n    Parameters.resourceGroupName,\n    Parameters.name,\n    Parameters.subscriptionId\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.RedisAccessKeys\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n\nconst regenerateKeyOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/regenerateKey\",\n  urlParameters: [\n    Parameters.resourceGroupName,\n    Parameters.name,\n    Parameters.subscriptionId\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  requestBody: {\n    parameterPath: {\n      keyType: \"keyType\"\n    },\n    mapper: {\n      ...Mappers.RedisRegenerateKeyParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.RedisAccessKeys\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n\nconst forceRebootOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/forceReboot\",\n  urlParameters: [\n    Parameters.resourceGroupName,\n    Parameters.name,\n    Parameters.subscriptionId\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  requestBody: {\n    parameterPath: \"parameters\",\n    mapper: {\n      ...Mappers.RedisRebootParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.RedisForceRebootResponse\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n\nconst beginCreateOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}\",\n  urlParameters: [\n    Parameters.resourceGroupName,\n    Parameters.name,\n    Parameters.subscriptionId\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  requestBody: {\n    parameterPath: \"parameters\",\n    mapper: {\n      ...Mappers.RedisCreateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.RedisResource\n    },\n    201: {\n      bodyMapper: Mappers.RedisResource\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n\nconst beginDeleteMethodOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}\",\n  urlParameters: [\n    Parameters.resourceGroupName,\n    Parameters.name,\n    Parameters.subscriptionId\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  responses: {\n    200: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n\nconst beginImportDataOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/import\",\n  urlParameters: [\n    Parameters.resourceGroupName,\n    Parameters.name,\n    Parameters.subscriptionId\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  requestBody: {\n    parameterPath: \"parameters\",\n    mapper: {\n      ...Mappers.ImportRDBParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n\nconst beginExportDataOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/export\",\n  urlParameters: [\n    Parameters.resourceGroupName,\n    Parameters.name,\n    Parameters.subscriptionId\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  requestBody: {\n    parameterPath: \"parameters\",\n    mapper: {\n      ...Mappers.ExportRDBParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n\nconst listByResourceGroupNextOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  baseUrl: \"https://management.azure.com\",\n  path: \"{nextLink}\",\n  urlParameters: [\n    Parameters.nextPageLink\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.RedisListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n\nconst listNextOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  baseUrl: \"https://management.azure.com\",\n  path: \"{nextLink}\",\n  urlParameters: [\n    Parameters.nextPageLink\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.RedisListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nexport {\n  BaseResource,\n  CloudError,\n  ProxyResource,\n  RedisAccessKeys,\n  RedisFirewallRule,\n  RedisFirewallRuleCreateParameters,\n  RedisFirewallRuleListResult,\n  RedisInstanceDetails,\n  RedisLinkedServer,\n  RedisLinkedServerWithProperties,\n  RedisPatchSchedule,\n  RedisResource,\n  Resource,\n  ScheduleEntry,\n  Sku,\n  TrackedResource\n} from \"../models/mappers\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/firewallRulesMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { RedisManagementClientContext } from \"../redisManagementClientContext\";\n\n/** Class representing a FirewallRules. */\nexport class FirewallRules {\n  private readonly client: RedisManagementClientContext;\n\n  /**\n   * Create a FirewallRules.\n   * @param {RedisManagementClientContext} client Reference to the service client.\n   */\n  constructor(client: RedisManagementClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Gets all firewall rules in the specified redis cache.\n   * @param resourceGroupName The name of the resource group.\n   * @param cacheName The name of the Redis cache.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FirewallRulesListByRedisResourceResponse>\n   */\n  listByRedisResource(resourceGroupName: string, cacheName: string, options?: msRest.RequestOptionsBase): Promise<Models.FirewallRulesListByRedisResourceResponse>;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param cacheName The name of the Redis cache.\n   * @param callback The callback\n   */\n  listByRedisResource(resourceGroupName: string, cacheName: string, callback: msRest.ServiceCallback<Models.RedisFirewallRuleListResult>): void;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param cacheName The name of the Redis cache.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listByRedisResource(resourceGroupName: string, cacheName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisFirewallRuleListResult>): void;\n  listByRedisResource(resourceGroupName: string, cacheName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RedisFirewallRuleListResult>, callback?: msRest.ServiceCallback<Models.RedisFirewallRuleListResult>): Promise<Models.FirewallRulesListByRedisResourceResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        cacheName,\n        options\n      },\n      listByRedisResourceOperationSpec,\n      callback) as Promise<Models.FirewallRulesListByRedisResourceResponse>;\n  }\n\n  /**\n   * Create or update a redis cache firewall rule\n   * @param resourceGroupName The name of the resource group.\n   * @param cacheName The name of the Redis cache.\n   * @param ruleName The name of the firewall rule.\n   * @param parameters Parameters supplied to the create or update redis firewall rule operation.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FirewallRulesCreateOrUpdateResponse>\n   */\n  createOrUpdate(resourceGroupName: string, cacheName: string, ruleName: string, parameters: Models.RedisFirewallRuleCreateParameters, options?: msRest.RequestOptionsBase): Promise<Models.FirewallRulesCreateOrUpdateResponse>;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param cacheName The name of the Redis cache.\n   * @param ruleName The name of the firewall rule.\n   * @param parameters Parameters supplied to the create or update redis firewall rule operation.\n   * @param callback The callback\n   */\n  createOrUpdate(resourceGroupName: string, cacheName: string, ruleName: string, parameters: Models.RedisFirewallRuleCreateParameters, callback: msRest.ServiceCallback<Models.RedisFirewallRule>): void;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param cacheName The name of the Redis cache.\n   * @param ruleName The name of the firewall rule.\n   * @param parameters Parameters supplied to the create or update redis firewall rule operation.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  createOrUpdate(resourceGroupName: string, cacheName: string, ruleName: string, parameters: Models.RedisFirewallRuleCreateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisFirewallRule>): void;\n  createOrUpdate(resourceGroupName: string, cacheName: string, ruleName: string, parameters: Models.RedisFirewallRuleCreateParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RedisFirewallRule>, callback?: msRest.ServiceCallback<Models.RedisFirewallRule>): Promise<Models.FirewallRulesCreateOrUpdateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        cacheName,\n        ruleName,\n        parameters,\n        options\n      },\n      createOrUpdateOperationSpec,\n      callback) as Promise<Models.FirewallRulesCreateOrUpdateResponse>;\n  }\n\n  /**\n   * Gets a single firewall rule in a specified redis cache.\n   * @param resourceGroupName The name of the resource group.\n   * @param cacheName The name of the Redis cache.\n   * @param ruleName The name of the firewall rule.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FirewallRulesGetResponse>\n   */\n  get(resourceGroupName: string, cacheName: string, ruleName: string, options?: msRest.RequestOptionsBase): Promise<Models.FirewallRulesGetResponse>;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param cacheName The name of the Redis cache.\n   * @param ruleName The name of the firewall rule.\n   * @param callback The callback\n   */\n  get(resourceGroupName: string, cacheName: string, ruleName: string, callback: msRest.ServiceCallback<Models.RedisFirewallRule>): void;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param cacheName The name of the Redis cache.\n   * @param ruleName The name of the firewall rule.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  get(resourceGroupName: string, cacheName: string, ruleName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisFirewallRule>): void;\n  get(resourceGroupName: string, cacheName: string, ruleName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RedisFirewallRule>, callback?: msRest.ServiceCallback<Models.RedisFirewallRule>): Promise<Models.FirewallRulesGetResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        cacheName,\n        ruleName,\n        options\n      },\n      getOperationSpec,\n      callback) as Promise<Models.FirewallRulesGetResponse>;\n  }\n\n  /**\n   * Deletes a single firewall rule in a specified redis cache.\n   * @param resourceGroupName The name of the resource group.\n   * @param cacheName The name of the Redis cache.\n   * @param ruleName The name of the firewall rule.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  deleteMethod(resourceGroupName: string, cacheName: string, ruleName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param cacheName The name of the Redis cache.\n   * @param ruleName The name of the firewall rule.\n   * @param callback The callback\n   */\n  deleteMethod(resourceGroupName: string, cacheName: string, ruleName: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param cacheName The name of the Redis cache.\n   * @param ruleName The name of the firewall rule.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteMethod(resourceGroupName: string, cacheName: string, ruleName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteMethod(resourceGroupName: string, cacheName: string, ruleName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        cacheName,\n        ruleName,\n        options\n      },\n      deleteMethodOperationSpec,\n      callback);\n  }\n\n  /**\n   * Gets all firewall rules in the specified redis cache.\n   * @param nextPageLink The NextLink from the previous successful call to List operation.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.FirewallRulesListByRedisResourceNextResponse>\n   */\n  listByRedisResourceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.FirewallRulesListByRedisResourceNextResponse>;\n  /**\n   * @param nextPageLink The NextLink from the previous successful call to List operation.\n   * @param callback The callback\n   */\n  listByRedisResourceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RedisFirewallRuleListResult>): void;\n  /**\n   * @param nextPageLink The NextLink from the previous successful call to List operation.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listByRedisResourceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisFirewallRuleListResult>): void;\n  listByRedisResourceNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RedisFirewallRuleListResult>, callback?: msRest.ServiceCallback<Models.RedisFirewallRuleListResult>): Promise<Models.FirewallRulesListByRedisResourceNextResponse> {\n    return this.client.sendOperationRequest(\n      {\n        nextPageLink,\n        options\n      },\n      listByRedisResourceNextOperationSpec,\n      callback) as Promise<Models.FirewallRulesListByRedisResourceNextResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new msRest.Serializer(Mappers);\nconst listByRedisResourceOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{cacheName}/firewallRules\",\n  urlParameters: [\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.cacheName\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.RedisFirewallRuleListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n\nconst createOrUpdateOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{cacheName}/firewallRules/{ruleName}\",\n  urlParameters: [\n    Parameters.resourceGroupName,\n    Parameters.cacheName,\n    Parameters.ruleName,\n    Parameters.subscriptionId\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  requestBody: {\n    parameterPath: \"parameters\",\n    mapper: {\n      ...Mappers.RedisFirewallRuleCreateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.RedisFirewallRule\n    },\n    201: {\n      bodyMapper: Mappers.RedisFirewallRule\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n\nconst getOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{cacheName}/firewallRules/{ruleName}\",\n  urlParameters: [\n    Parameters.resourceGroupName,\n    Parameters.cacheName,\n    Parameters.ruleName,\n    Parameters.subscriptionId\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.RedisFirewallRule\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n\nconst deleteMethodOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{cacheName}/firewallRules/{ruleName}\",\n  urlParameters: [\n    Parameters.resourceGroupName,\n    Parameters.cacheName,\n    Parameters.ruleName,\n    Parameters.subscriptionId\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  responses: {\n    200: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n\nconst listByRedisResourceNextOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  baseUrl: \"https://management.azure.com\",\n  path: \"{nextLink}\",\n  urlParameters: [\n    Parameters.nextPageLink\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.RedisFirewallRuleListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nexport {\n  BaseResource,\n  CloudError,\n  ProxyResource,\n  RedisAccessKeys,\n  RedisFirewallRule,\n  RedisInstanceDetails,\n  RedisLinkedServer,\n  RedisLinkedServerWithProperties,\n  RedisPatchSchedule,\n  RedisPatchScheduleListResult,\n  RedisResource,\n  Resource,\n  ScheduleEntry,\n  Sku,\n  TrackedResource\n} from \"../models/mappers\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/patchSchedulesMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { RedisManagementClientContext } from \"../redisManagementClientContext\";\n\n/** Class representing a PatchSchedules. */\nexport class PatchSchedules {\n  private readonly client: RedisManagementClientContext;\n\n  /**\n   * Create a PatchSchedules.\n   * @param {RedisManagementClientContext} client Reference to the service client.\n   */\n  constructor(client: RedisManagementClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Gets all patch schedules in the specified redis cache (there is only one).\n   * @param resourceGroupName The name of the resource group.\n   * @param cacheName The name of the Redis cache.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PatchSchedulesListByRedisResourceResponse>\n   */\n  listByRedisResource(resourceGroupName: string, cacheName: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchSchedulesListByRedisResourceResponse>;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param cacheName The name of the Redis cache.\n   * @param callback The callback\n   */\n  listByRedisResource(resourceGroupName: string, cacheName: string, callback: msRest.ServiceCallback<Models.RedisPatchScheduleListResult>): void;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param cacheName The name of the Redis cache.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listByRedisResource(resourceGroupName: string, cacheName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisPatchScheduleListResult>): void;\n  listByRedisResource(resourceGroupName: string, cacheName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RedisPatchScheduleListResult>, callback?: msRest.ServiceCallback<Models.RedisPatchScheduleListResult>): Promise<Models.PatchSchedulesListByRedisResourceResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        cacheName,\n        options\n      },\n      listByRedisResourceOperationSpec,\n      callback) as Promise<Models.PatchSchedulesListByRedisResourceResponse>;\n  }\n\n  /**\n   * Create or replace the patching schedule for Redis cache (requires Premium SKU).\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param scheduleEntries List of patch schedules for a Redis cache.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PatchSchedulesCreateOrUpdateResponse>\n   */\n  createOrUpdate(resourceGroupName: string, name: string, scheduleEntries: Models.ScheduleEntry[], options?: msRest.RequestOptionsBase): Promise<Models.PatchSchedulesCreateOrUpdateResponse>;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param scheduleEntries List of patch schedules for a Redis cache.\n   * @param callback The callback\n   */\n  createOrUpdate(resourceGroupName: string, name: string, scheduleEntries: Models.ScheduleEntry[], callback: msRest.ServiceCallback<Models.RedisPatchSchedule>): void;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param scheduleEntries List of patch schedules for a Redis cache.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  createOrUpdate(resourceGroupName: string, name: string, scheduleEntries: Models.ScheduleEntry[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisPatchSchedule>): void;\n  createOrUpdate(resourceGroupName: string, name: string, scheduleEntries: Models.ScheduleEntry[], options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RedisPatchSchedule>, callback?: msRest.ServiceCallback<Models.RedisPatchSchedule>): Promise<Models.PatchSchedulesCreateOrUpdateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        name,\n        scheduleEntries,\n        options\n      },\n      createOrUpdateOperationSpec,\n      callback) as Promise<Models.PatchSchedulesCreateOrUpdateResponse>;\n  }\n\n  /**\n   * Deletes the patching schedule of a redis cache (requires Premium SKU).\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the redis cache.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  deleteMethod(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the redis cache.\n   * @param callback The callback\n   */\n  deleteMethod(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the redis cache.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteMethod(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteMethod(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        name,\n        options\n      },\n      deleteMethodOperationSpec,\n      callback);\n  }\n\n  /**\n   * Gets the patching schedule of a redis cache (requires Premium SKU).\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the redis cache.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PatchSchedulesGetResponse>\n   */\n  get(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchSchedulesGetResponse>;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the redis cache.\n   * @param callback The callback\n   */\n  get(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.RedisPatchSchedule>): void;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the redis cache.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  get(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisPatchSchedule>): void;\n  get(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RedisPatchSchedule>, callback?: msRest.ServiceCallback<Models.RedisPatchSchedule>): Promise<Models.PatchSchedulesGetResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        name,\n        options\n      },\n      getOperationSpec,\n      callback) as Promise<Models.PatchSchedulesGetResponse>;\n  }\n\n  /**\n   * Gets all patch schedules in the specified redis cache (there is only one).\n   * @param nextPageLink The NextLink from the previous successful call to List operation.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PatchSchedulesListByRedisResourceNextResponse>\n   */\n  listByRedisResourceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchSchedulesListByRedisResourceNextResponse>;\n  /**\n   * @param nextPageLink The NextLink from the previous successful call to List operation.\n   * @param callback The callback\n   */\n  listByRedisResourceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RedisPatchScheduleListResult>): void;\n  /**\n   * @param nextPageLink The NextLink from the previous successful call to List operation.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listByRedisResourceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisPatchScheduleListResult>): void;\n  listByRedisResourceNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RedisPatchScheduleListResult>, callback?: msRest.ServiceCallback<Models.RedisPatchScheduleListResult>): Promise<Models.PatchSchedulesListByRedisResourceNextResponse> {\n    return this.client.sendOperationRequest(\n      {\n        nextPageLink,\n        options\n      },\n      listByRedisResourceNextOperationSpec,\n      callback) as Promise<Models.PatchSchedulesListByRedisResourceNextResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new msRest.Serializer(Mappers);\nconst listByRedisResourceOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{cacheName}/patchSchedules\",\n  urlParameters: [\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.cacheName\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.RedisPatchScheduleListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n\nconst createOrUpdateOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/patchSchedules/{default}\",\n  urlParameters: [\n    Parameters.resourceGroupName,\n    Parameters.name,\n    Parameters.defaultParameter,\n    Parameters.subscriptionId\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  requestBody: {\n    parameterPath: {\n      scheduleEntries: \"scheduleEntries\"\n    },\n    mapper: {\n      ...Mappers.RedisPatchSchedule,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.RedisPatchSchedule\n    },\n    201: {\n      bodyMapper: Mappers.RedisPatchSchedule\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n\nconst deleteMethodOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/patchSchedules/{default}\",\n  urlParameters: [\n    Parameters.resourceGroupName,\n    Parameters.name,\n    Parameters.defaultParameter,\n    Parameters.subscriptionId\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  responses: {\n    200: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n\nconst getOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/patchSchedules/{default}\",\n  urlParameters: [\n    Parameters.resourceGroupName,\n    Parameters.name,\n    Parameters.defaultParameter,\n    Parameters.subscriptionId\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.RedisPatchSchedule\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n\nconst listByRedisResourceNextOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  baseUrl: \"https://management.azure.com\",\n  path: \"{nextLink}\",\n  urlParameters: [\n    Parameters.nextPageLink\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.RedisPatchScheduleListResult\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nexport {\n  BaseResource,\n  CloudError,\n  ProxyResource,\n  RedisAccessKeys,\n  RedisFirewallRule,\n  RedisInstanceDetails,\n  RedisLinkedServer,\n  RedisLinkedServerCreateParameters,\n  RedisLinkedServerWithProperties,\n  RedisLinkedServerWithPropertiesList,\n  RedisPatchSchedule,\n  RedisResource,\n  Resource,\n  ScheduleEntry,\n  Sku,\n  TrackedResource\n} from \"../models/mappers\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as msRestAzure from \"@azure/ms-rest-azure-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/linkedServerMappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { RedisManagementClientContext } from \"../redisManagementClientContext\";\n\n/** Class representing a LinkedServer. */\nexport class LinkedServer {\n  private readonly client: RedisManagementClientContext;\n\n  /**\n   * Create a LinkedServer.\n   * @param {RedisManagementClientContext} client Reference to the service client.\n   */\n  constructor(client: RedisManagementClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Adds a linked server to the Redis cache (requires Premium SKU).\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param linkedServerName The name of the linked server that is being added to the Redis cache.\n   * @param parameters Parameters supplied to the Create Linked server operation.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.LinkedServerCreateResponse>\n   */\n  create(resourceGroupName: string, name: string, linkedServerName: string, parameters: Models.RedisLinkedServerCreateParameters, options?: msRest.RequestOptionsBase): Promise<Models.LinkedServerCreateResponse> {\n    return this.beginCreate(resourceGroupName,name,linkedServerName,parameters,options)\n      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LinkedServerCreateResponse>;\n  }\n\n  /**\n   * Deletes the linked server from a redis cache (requires Premium SKU).\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the redis cache.\n   * @param linkedServerName The name of the linked server that is being added to the Redis cache.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  deleteMethod(resourceGroupName: string, name: string, linkedServerName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the redis cache.\n   * @param linkedServerName The name of the linked server that is being added to the Redis cache.\n   * @param callback The callback\n   */\n  deleteMethod(resourceGroupName: string, name: string, linkedServerName: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the redis cache.\n   * @param linkedServerName The name of the linked server that is being added to the Redis cache.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteMethod(resourceGroupName: string, name: string, linkedServerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteMethod(resourceGroupName: string, name: string, linkedServerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        name,\n        linkedServerName,\n        options\n      },\n      deleteMethodOperationSpec,\n      callback);\n  }\n\n  /**\n   * Gets the detailed information about a linked server of a redis cache (requires Premium SKU).\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the redis cache.\n   * @param linkedServerName The name of the linked server.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.LinkedServerGetResponse>\n   */\n  get(resourceGroupName: string, name: string, linkedServerName: string, options?: msRest.RequestOptionsBase): Promise<Models.LinkedServerGetResponse>;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the redis cache.\n   * @param linkedServerName The name of the linked server.\n   * @param callback The callback\n   */\n  get(resourceGroupName: string, name: string, linkedServerName: string, callback: msRest.ServiceCallback<Models.RedisLinkedServerWithProperties>): void;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the redis cache.\n   * @param linkedServerName The name of the linked server.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  get(resourceGroupName: string, name: string, linkedServerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisLinkedServerWithProperties>): void;\n  get(resourceGroupName: string, name: string, linkedServerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RedisLinkedServerWithProperties>, callback?: msRest.ServiceCallback<Models.RedisLinkedServerWithProperties>): Promise<Models.LinkedServerGetResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        name,\n        linkedServerName,\n        options\n      },\n      getOperationSpec,\n      callback) as Promise<Models.LinkedServerGetResponse>;\n  }\n\n  /**\n   * Gets the list of linked servers associated with this redis cache (requires Premium SKU).\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the redis cache.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.LinkedServerListResponse>\n   */\n  list(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.LinkedServerListResponse>;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the redis cache.\n   * @param callback The callback\n   */\n  list(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.RedisLinkedServerWithPropertiesList>): void;\n  /**\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the redis cache.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  list(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisLinkedServerWithPropertiesList>): void;\n  list(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RedisLinkedServerWithPropertiesList>, callback?: msRest.ServiceCallback<Models.RedisLinkedServerWithPropertiesList>): Promise<Models.LinkedServerListResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        name,\n        options\n      },\n      listOperationSpec,\n      callback) as Promise<Models.LinkedServerListResponse>;\n  }\n\n  /**\n   * Adds a linked server to the Redis cache (requires Premium SKU).\n   * @param resourceGroupName The name of the resource group.\n   * @param name The name of the Redis cache.\n   * @param linkedServerName The name of the linked server that is being added to the Redis cache.\n   * @param parameters Parameters supplied to the Create Linked server operation.\n   * @param [options] The optional parameters\n   * @returns Promise<msRestAzure.LROPoller>\n   */\n  beginCreate(resourceGroupName: string, name: string, linkedServerName: string, parameters: Models.RedisLinkedServerCreateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {\n    return this.client.sendLRORequest(\n      {\n        resourceGroupName,\n        name,\n        linkedServerName,\n        parameters,\n        options\n      },\n      beginCreateOperationSpec,\n      options);\n  }\n\n  /**\n   * Gets the list of linked servers associated with this redis cache (requires Premium SKU).\n   * @param nextPageLink The NextLink from the previous successful call to List operation.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.LinkedServerListNextResponse>\n   */\n  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.LinkedServerListNextResponse>;\n  /**\n   * @param nextPageLink The NextLink from the previous successful call to List operation.\n   * @param callback The callback\n   */\n  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RedisLinkedServerWithPropertiesList>): void;\n  /**\n   * @param nextPageLink The NextLink from the previous successful call to List operation.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RedisLinkedServerWithPropertiesList>): void;\n  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RedisLinkedServerWithPropertiesList>, callback?: msRest.ServiceCallback<Models.RedisLinkedServerWithPropertiesList>): Promise<Models.LinkedServerListNextResponse> {\n    return this.client.sendOperationRequest(\n      {\n        nextPageLink,\n        options\n      },\n      listNextOperationSpec,\n      callback) as Promise<Models.LinkedServerListNextResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new msRest.Serializer(Mappers);\nconst deleteMethodOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/linkedServers/{linkedServerName}\",\n  urlParameters: [\n    Parameters.resourceGroupName,\n    Parameters.name,\n    Parameters.linkedServerName,\n    Parameters.subscriptionId\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n\nconst getOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/linkedServers/{linkedServerName}\",\n  urlParameters: [\n    Parameters.resourceGroupName,\n    Parameters.name,\n    Parameters.linkedServerName,\n    Parameters.subscriptionId\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.RedisLinkedServerWithProperties\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n\nconst listOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/linkedServers\",\n  urlParameters: [\n    Parameters.resourceGroupName,\n    Parameters.name,\n    Parameters.subscriptionId\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.RedisLinkedServerWithPropertiesList\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n\nconst beginCreateOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/linkedServers/{linkedServerName}\",\n  urlParameters: [\n    Parameters.resourceGroupName,\n    Parameters.name,\n    Parameters.linkedServerName,\n    Parameters.subscriptionId\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  requestBody: {\n    parameterPath: \"parameters\",\n    mapper: {\n      ...Mappers.RedisLinkedServerCreateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.RedisLinkedServerWithProperties\n    },\n    201: {\n      bodyMapper: Mappers.RedisLinkedServerWithProperties\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n\nconst listNextOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  baseUrl: \"https://management.azure.com\",\n  path: \"{nextLink}\",\n  urlParameters: [\n    Parameters.nextPageLink\n  ],\n  headerParameters: [\n    Parameters.acceptLanguage\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.RedisLinkedServerWithPropertiesList\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as Models from \"./models\";\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as msRestAzure from \"@azure/ms-rest-azure-js\";\n\nconst packageName = \"@azure/arm-rediscache\";\nconst packageVersion = \"4.0.0\";\n\nexport class RedisManagementClientContext extends msRestAzure.AzureServiceClient {\n  credentials: msRest.ServiceClientCredentials;\n  subscriptionId: string;\n  apiVersion?: string;\n\n  /**\n   * Initializes a new instance of the RedisManagementClient class.\n   * @param credentials Credentials needed for the client to connect to Azure.\n   * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure\n   * subscription. The subscription ID forms part of the URI for every service call.\n   * @param [options] The parameter options\n   */\n  constructor(credentials: msRest.ServiceClientCredentials, subscriptionId: string, options?: Models.RedisManagementClientOptions) {\n    if (credentials == undefined) {\n      throw new Error('\\'credentials\\' cannot be null.');\n    }\n    if (subscriptionId == undefined) {\n      throw new Error('\\'subscriptionId\\' cannot be null.');\n    }\n\n    if (!options) {\n      options = {};\n    }\n    if(!options.userAgent) {\n      const defaultUserAgent = msRestAzure.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(credentials, options);\n\n    this.apiVersion = '2019-07-01';\n    this.acceptLanguage = 'en-US';\n    this.longRunningOperationRetryTimeout = 30;\n    this.baseUri = options.baseUri || this.baseUri || \"https://management.azure.com\";\n    this.requestContentType = \"application/json; charset=utf-8\";\n    this.credentials = credentials;\n    this.subscriptionId = subscriptionId;\n\n    if(options.acceptLanguage !== null && options.acceptLanguage !== undefined) {\n      this.acceptLanguage = options.acceptLanguage;\n    }\n    if(options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {\n      this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;\n    }\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"./models\";\nimport * as Mappers from \"./models/mappers\";\nimport * as operations from \"./operations\";\nimport { RedisManagementClientContext } from \"./redisManagementClientContext\";\n\n\nclass RedisManagementClient extends RedisManagementClientContext {\n  // Operation groups\n  operations: operations.Operations;\n  redis: operations.Redis;\n  firewallRules: operations.FirewallRules;\n  patchSchedules: operations.PatchSchedules;\n  linkedServer: operations.LinkedServer;\n\n  /**\n   * Initializes a new instance of the RedisManagementClient class.\n   * @param credentials Credentials needed for the client to connect to Azure.\n   * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure\n   * subscription. The subscription ID forms part of the URI for every service call.\n   * @param [options] The parameter options\n   */\n  constructor(credentials: msRest.ServiceClientCredentials, subscriptionId: string, options?: Models.RedisManagementClientOptions) {\n    super(credentials, subscriptionId, options);\n    this.operations = new operations.Operations(this);\n    this.redis = new operations.Redis(this);\n    this.firewallRules = new operations.FirewallRules(this);\n    this.patchSchedules = new operations.PatchSchedules(this);\n    this.linkedServer = new operations.LinkedServer(this);\n  }\n}\n\n// Operation Specifications\n\nexport {\n  RedisManagementClient,\n  RedisManagementClientContext,\n  Models as RedisManagementModels,\n  Mappers as RedisManagementMappers\n};\nexport * from \"./operations\";\n"],"names":["CloudErrorMapper","BaseResourceMapper","msRest.Serializer","Parameters.apiVersion","Parameters.acceptLanguage","Mappers.OperationListResult","Mappers.CloudError","Parameters.nextPageLink","listOperationSpec","listNextOperationSpec","serializer","Mappers","Parameters.subscriptionId","Mappers.CheckNameAvailabilityParameters","Parameters.resourceGroupName","Parameters.name","Parameters.history","Mappers.NotificationListResponse","Mappers.RedisUpdateParameters","Mappers.RedisResource","Mappers.RedisListResult","Mappers.RedisAccessKeys","Mappers.RedisRegenerateKeyParameters","Mappers.RedisRebootParameters","Mappers.RedisForceRebootResponse","Mappers.RedisCreateParameters","Mappers.ImportRDBParameters","Mappers.ExportRDBParameters","getOperationSpec","Parameters.cacheName","Mappers.RedisFirewallRuleListResult","Parameters.ruleName","Mappers.RedisFirewallRuleCreateParameters","Mappers.RedisFirewallRule","listByRedisResourceOperationSpec","createOrUpdateOperationSpec","deleteMethodOperationSpec","listByRedisResourceNextOperationSpec","Mappers.RedisPatchScheduleListResult","Parameters.defaultParameter","Mappers.RedisPatchSchedule","beginCreateOperationSpec","Parameters.linkedServerName","Mappers.RedisLinkedServerWithProperties","Mappers.RedisLinkedServerWithPropertiesList","Mappers.RedisLinkedServerCreateParameters","msRestAzure.getDefaultUserAgentValue","msRestAzure.AzureServiceClient","operations.Operations","operations.Redis","operations.FirewallRules","operations.PatchSchedules","operations.LinkedServer"],"mappings":"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"}