/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-azure-js'), require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-azure-js', '@azure/ms-rest-js'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.ArmRediscache = {}), global.msRestAzure, global.msRest));
}(this, (function (exports, msRestAzure, msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                family: {
                    required: true,
                    serializedName: "family",
                    type: {
                        name: "String"
                    }
                },
                capacity: {
                    required: true,
                    serializedName: "capacity",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var RedisAccessKeys = {
        serializedName: "RedisAccessKeys",
        type: {
            name: "Composite",
            className: "RedisAccessKeys",
            modelProperties: {
                primaryKey: {
                    readOnly: true,
                    serializedName: "primaryKey",
                    type: {
                        name: "String"
                    }
                },
                secondaryKey: {
                    readOnly: true,
                    serializedName: "secondaryKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RedisLinkedServer = {
        serializedName: "RedisLinkedServer",
        type: {
            name: "Composite",
            className: "RedisLinkedServer",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RedisInstanceDetails = {
        serializedName: "RedisInstanceDetails",
        type: {
            name: "Composite",
            className: "RedisInstanceDetails",
            modelProperties: {
                sslPort: {
                    readOnly: true,
                    serializedName: "sslPort",
                    type: {
                        name: "Number"
                    }
                },
                nonSslPort: {
                    readOnly: true,
                    serializedName: "nonSslPort",
                    type: {
                        name: "Number"
                    }
                },
                zone: {
                    readOnly: true,
                    serializedName: "zone",
                    type: {
                        name: "String"
                    }
                },
                shardId: {
                    readOnly: true,
                    serializedName: "shardId",
                    type: {
                        name: "Number"
                    }
                },
                isMaster: {
                    readOnly: true,
                    serializedName: "isMaster",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProxyResource = {
        serializedName: "ProxyResource",
        type: {
            name: "Composite",
            className: "ProxyResource",
            modelProperties: __assign({}, Resource.type.modelProperties)
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RedisCreateParameters = {
        serializedName: "RedisCreateParameters",
        type: {
            name: "Composite",
            className: "RedisCreateParameters",
            modelProperties: {
                redisConfiguration: {
                    serializedName: "properties.redisConfiguration",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                enableNonSslPort: {
                    serializedName: "properties.enableNonSslPort",
                    type: {
                        name: "Boolean"
                    }
                },
                replicasPerMaster: {
                    serializedName: "properties.replicasPerMaster",
                    type: {
                        name: "Number"
                    }
                },
                tenantSettings: {
                    serializedName: "properties.tenantSettings",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                shardCount: {
                    serializedName: "properties.shardCount",
                    type: {
                        name: "Number"
                    }
                },
                minimumTlsVersion: {
                    serializedName: "properties.minimumTlsVersion",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    required: true,
                    serializedName: "properties.sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                subnetId: {
                    serializedName: "properties.subnetId",
                    constraints: {
                        Pattern: /^\/subscriptions\/[^\/]*\/resourceGroups\/[^\/]*\/providers\/Microsoft.(ClassicNetwork|Network)\/virtualNetworks\/[^\/]*\/subnets\/[^\/]*$/
                    },
                    type: {
                        name: "String"
                    }
                },
                staticIP: {
                    serializedName: "properties.staticIP",
                    constraints: {
                        Pattern: /^\d+\.\d+\.\d+\.\d+$/
                    },
                    type: {
                        name: "String"
                    }
                },
                zones: {
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var RedisUpdateParameters = {
        serializedName: "RedisUpdateParameters",
        type: {
            name: "Composite",
            className: "RedisUpdateParameters",
            modelProperties: {
                redisConfiguration: {
                    serializedName: "properties.redisConfiguration",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                enableNonSslPort: {
                    serializedName: "properties.enableNonSslPort",
                    type: {
                        name: "Boolean"
                    }
                },
                replicasPerMaster: {
                    serializedName: "properties.replicasPerMaster",
                    type: {
                        name: "Number"
                    }
                },
                tenantSettings: {
                    serializedName: "properties.tenantSettings",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                shardCount: {
                    serializedName: "properties.shardCount",
                    type: {
                        name: "Number"
                    }
                },
                minimumTlsVersion: {
                    serializedName: "properties.minimumTlsVersion",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    serializedName: "properties.sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var RedisFirewallRuleProperties = {
        serializedName: "RedisFirewallRuleProperties",
        type: {
            name: "Composite",
            className: "RedisFirewallRuleProperties",
            modelProperties: {
                startIP: {
                    required: true,
                    serializedName: "startIP",
                    type: {
                        name: "String"
                    }
                },
                endIP: {
                    required: true,
                    serializedName: "endIP",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RedisFirewallRule = {
        serializedName: "RedisFirewallRule",
        type: {
            name: "Composite",
            className: "RedisFirewallRule",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { startIP: {
                    required: true,
                    serializedName: "properties.startIP",
                    type: {
                        name: "String"
                    }
                }, endIP: {
                    required: true,
                    serializedName: "properties.endIP",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RedisFirewallRuleCreateParameters = {
        serializedName: "RedisFirewallRuleCreateParameters",
        type: {
            name: "Composite",
            className: "RedisFirewallRuleCreateParameters",
            modelProperties: {
                startIP: {
                    required: true,
                    serializedName: "properties.startIP",
                    type: {
                        name: "String"
                    }
                },
                endIP: {
                    required: true,
                    serializedName: "properties.endIP",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RedisResource = {
        serializedName: "RedisResource",
        type: {
            name: "Composite",
            className: "RedisResource",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { redisConfiguration: {
                    serializedName: "properties.redisConfiguration",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, enableNonSslPort: {
                    serializedName: "properties.enableNonSslPort",
                    type: {
                        name: "Boolean"
                    }
                }, replicasPerMaster: {
                    serializedName: "properties.replicasPerMaster",
                    type: {
                        name: "Number"
                    }
                }, tenantSettings: {
                    serializedName: "properties.tenantSettings",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, shardCount: {
                    serializedName: "properties.shardCount",
                    type: {
                        name: "Number"
                    }
                }, minimumTlsVersion: {
                    serializedName: "properties.minimumTlsVersion",
                    type: {
                        name: "String"
                    }
                }, sku: {
                    required: true,
                    serializedName: "properties.sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, subnetId: {
                    serializedName: "properties.subnetId",
                    constraints: {
                        Pattern: /^\/subscriptions\/[^\/]*\/resourceGroups\/[^\/]*\/providers\/Microsoft.(ClassicNetwork|Network)\/virtualNetworks\/[^\/]*\/subnets\/[^\/]*$/
                    },
                    type: {
                        name: "String"
                    }
                }, staticIP: {
                    serializedName: "properties.staticIP",
                    constraints: {
                        Pattern: /^\d+\.\d+\.\d+\.\d+$/
                    },
                    type: {
                        name: "String"
                    }
                }, redisVersion: {
                    readOnly: true,
                    serializedName: "properties.redisVersion",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, hostName: {
                    readOnly: true,
                    serializedName: "properties.hostName",
                    type: {
                        name: "String"
                    }
                }, port: {
                    readOnly: true,
                    serializedName: "properties.port",
                    type: {
                        name: "Number"
                    }
                }, sslPort: {
                    readOnly: true,
                    serializedName: "properties.sslPort",
                    type: {
                        name: "Number"
                    }
                }, accessKeys: {
                    readOnly: true,
                    serializedName: "properties.accessKeys",
                    type: {
                        name: "Composite",
                        className: "RedisAccessKeys"
                    }
                }, linkedServers: {
                    readOnly: true,
                    serializedName: "properties.linkedServers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RedisLinkedServer"
                            }
                        }
                    }
                }, instances: {
                    readOnly: true,
                    serializedName: "properties.instances",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RedisInstanceDetails"
                            }
                        }
                    }
                }, zones: {
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var RedisRegenerateKeyParameters = {
        serializedName: "RedisRegenerateKeyParameters",
        type: {
            name: "Composite",
            className: "RedisRegenerateKeyParameters",
            modelProperties: {
                keyType: {
                    required: true,
                    serializedName: "keyType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Primary",
                            "Secondary"
                        ]
                    }
                }
            }
        }
    };
    var RedisRebootParameters = {
        serializedName: "RedisRebootParameters",
        type: {
            name: "Composite",
            className: "RedisRebootParameters",
            modelProperties: {
                rebootType: {
                    serializedName: "rebootType",
                    type: {
                        name: "String"
                    }
                },
                shardId: {
                    serializedName: "shardId",
                    type: {
                        name: "Number"
                    }
                },
                ports: {
                    serializedName: "ports",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                }
            }
        }
    };
    var ExportRDBParameters = {
        serializedName: "ExportRDBParameters",
        type: {
            name: "Composite",
            className: "ExportRDBParameters",
            modelProperties: {
                format: {
                    serializedName: "format",
                    type: {
                        name: "String"
                    }
                },
                prefix: {
                    required: true,
                    serializedName: "prefix",
                    type: {
                        name: "String"
                    }
                },
                container: {
                    required: true,
                    serializedName: "container",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImportRDBParameters = {
        serializedName: "ImportRDBParameters",
        type: {
            name: "Composite",
            className: "ImportRDBParameters",
            modelProperties: {
                format: {
                    serializedName: "format",
                    type: {
                        name: "String"
                    }
                },
                files: {
                    required: true,
                    serializedName: "files",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ScheduleEntry = {
        serializedName: "ScheduleEntry",
        type: {
            name: "Composite",
            className: "ScheduleEntry",
            modelProperties: {
                dayOfWeek: {
                    required: true,
                    serializedName: "dayOfWeek",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Monday",
                            "Tuesday",
                            "Wednesday",
                            "Thursday",
                            "Friday",
                            "Saturday",
                            "Sunday",
                            "Everyday",
                            "Weekend"
                        ]
                    }
                },
                startHourUtc: {
                    required: true,
                    serializedName: "startHourUtc",
                    type: {
                        name: "Number"
                    }
                },
                maintenanceWindow: {
                    serializedName: "maintenanceWindow",
                    type: {
                        name: "TimeSpan"
                    }
                }
            }
        }
    };
    var ScheduleEntries = {
        serializedName: "ScheduleEntries",
        type: {
            name: "Composite",
            className: "ScheduleEntries",
            modelProperties: {
                scheduleEntries: {
                    required: true,
                    serializedName: "scheduleEntries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ScheduleEntry"
                            }
                        }
                    }
                }
            }
        }
    };
    var RedisPatchSchedule = {
        serializedName: "RedisPatchSchedule",
        type: {
            name: "Composite",
            className: "RedisPatchSchedule",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { scheduleEntries: {
                    required: true,
                    serializedName: "properties.scheduleEntries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ScheduleEntry"
                            }
                        }
                    }
                } })
        }
    };
    var RedisForceRebootResponse = {
        serializedName: "RedisForceRebootResponse",
        type: {
            name: "Composite",
            className: "RedisForceRebootResponse",
            modelProperties: {
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RedisLinkedServerCreateProperties = {
        serializedName: "RedisLinkedServerCreateProperties",
        type: {
            name: "Composite",
            className: "RedisLinkedServerCreateProperties",
            modelProperties: {
                linkedRedisCacheId: {
                    required: true,
                    serializedName: "linkedRedisCacheId",
                    type: {
                        name: "String"
                    }
                },
                linkedRedisCacheLocation: {
                    required: true,
                    serializedName: "linkedRedisCacheLocation",
                    type: {
                        name: "String"
                    }
                },
                serverRole: {
                    required: true,
                    serializedName: "serverRole",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Primary",
                            "Secondary"
                        ]
                    }
                }
            }
        }
    };
    var RedisLinkedServerProperties = {
        serializedName: "RedisLinkedServerProperties",
        type: {
            name: "Composite",
            className: "RedisLinkedServerProperties",
            modelProperties: __assign(__assign({}, RedisLinkedServerCreateProperties.type.modelProperties), { provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RedisLinkedServerWithProperties = {
        serializedName: "RedisLinkedServerWithProperties",
        type: {
            name: "Composite",
            className: "RedisLinkedServerWithProperties",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { linkedRedisCacheId: {
                    required: true,
                    serializedName: "properties.linkedRedisCacheId",
                    type: {
                        name: "String"
                    }
                }, linkedRedisCacheLocation: {
                    required: true,
                    serializedName: "properties.linkedRedisCacheLocation",
                    type: {
                        name: "String"
                    }
                }, serverRole: {
                    required: true,
                    serializedName: "properties.serverRole",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Primary",
                            "Secondary"
                        ]
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RedisLinkedServerCreateParameters = {
        serializedName: "RedisLinkedServerCreateParameters",
        type: {
            name: "Composite",
            className: "RedisLinkedServerCreateParameters",
            modelProperties: {
                linkedRedisCacheId: {
                    required: true,
                    serializedName: "properties.linkedRedisCacheId",
                    type: {
                        name: "String"
                    }
                },
                linkedRedisCacheLocation: {
                    required: true,
                    serializedName: "properties.linkedRedisCacheLocation",
                    type: {
                        name: "String"
                    }
                },
                serverRole: {
                    required: true,
                    serializedName: "properties.serverRole",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Primary",
                            "Secondary"
                        ]
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var CheckNameAvailabilityParameters = {
        serializedName: "CheckNameAvailabilityParameters",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpgradeNotification = {
        serializedName: "UpgradeNotification",
        type: {
            name: "Composite",
            className: "UpgradeNotification",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                timestamp: {
                    readOnly: true,
                    serializedName: "timestamp",
                    type: {
                        name: "DateTime"
                    }
                },
                upsellNotification: {
                    readOnly: true,
                    serializedName: "upsellNotification",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var NotificationListResponse = {
        serializedName: "NotificationListResponse",
        type: {
            name: "Composite",
            className: "NotificationListResponse",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UpgradeNotification"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RedisListResult = {
        serializedName: "RedisListResult",
        type: {
            name: "Composite",
            className: "RedisListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RedisResource"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RedisFirewallRuleListResult = {
        serializedName: "RedisFirewallRuleListResult",
        type: {
            name: "Composite",
            className: "RedisFirewallRuleListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RedisFirewallRule"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RedisPatchScheduleListResult = {
        serializedName: "RedisPatchScheduleListResult",
        type: {
            name: "Composite",
            className: "RedisPatchScheduleListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RedisPatchSchedule"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RedisLinkedServerWithPropertiesList = {
        serializedName: "RedisLinkedServerWithPropertiesList",
        type: {
            name: "Composite",
            className: "RedisLinkedServerWithPropertiesList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RedisLinkedServerWithProperties"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        BaseResource: BaseResource,
        Sku: Sku,
        RedisAccessKeys: RedisAccessKeys,
        RedisLinkedServer: RedisLinkedServer,
        RedisInstanceDetails: RedisInstanceDetails,
        Resource: Resource,
        ProxyResource: ProxyResource,
        TrackedResource: TrackedResource,
        RedisCreateParameters: RedisCreateParameters,
        RedisUpdateParameters: RedisUpdateParameters,
        RedisFirewallRuleProperties: RedisFirewallRuleProperties,
        RedisFirewallRule: RedisFirewallRule,
        RedisFirewallRuleCreateParameters: RedisFirewallRuleCreateParameters,
        RedisResource: RedisResource,
        RedisRegenerateKeyParameters: RedisRegenerateKeyParameters,
        RedisRebootParameters: RedisRebootParameters,
        ExportRDBParameters: ExportRDBParameters,
        ImportRDBParameters: ImportRDBParameters,
        ScheduleEntry: ScheduleEntry,
        ScheduleEntries: ScheduleEntries,
        RedisPatchSchedule: RedisPatchSchedule,
        RedisForceRebootResponse: RedisForceRebootResponse,
        RedisLinkedServerCreateProperties: RedisLinkedServerCreateProperties,
        RedisLinkedServerProperties: RedisLinkedServerProperties,
        RedisLinkedServerWithProperties: RedisLinkedServerWithProperties,
        RedisLinkedServerCreateParameters: RedisLinkedServerCreateParameters,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        CheckNameAvailabilityParameters: CheckNameAvailabilityParameters,
        UpgradeNotification: UpgradeNotification,
        NotificationListResponse: NotificationListResponse,
        OperationListResult: OperationListResult,
        RedisListResult: RedisListResult,
        RedisFirewallRuleListResult: RedisFirewallRuleListResult,
        RedisPatchScheduleListResult: RedisPatchScheduleListResult,
        RedisLinkedServerWithPropertiesList: RedisLinkedServerWithPropertiesList
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        OperationListResult: OperationListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var cacheName = {
        parameterPath: "cacheName",
        mapper: {
            required: true,
            serializedName: "cacheName",
            type: {
                name: "String"
            }
        }
    };
    var defaultParameter = {
        parameterPath: "defaultParameter",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "default",
            defaultValue: 'default',
            type: {
                name: "String"
            }
        }
    };
    var history = {
        parameterPath: "history",
        mapper: {
            required: true,
            serializedName: "history",
            type: {
                name: "Number"
            }
        }
    };
    var linkedServerName = {
        parameterPath: "linkedServerName",
        mapper: {
            required: true,
            serializedName: "linkedServerName",
            type: {
                name: "String"
            }
        }
    };
    var name = {
        parameterPath: "name",
        mapper: {
            required: true,
            serializedName: "name",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var ruleName = {
        parameterPath: "ruleName",
        mapper: {
            required: true,
            serializedName: "ruleName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {RedisManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Operations.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Cache/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        BaseResource: BaseResource,
        CheckNameAvailabilityParameters: CheckNameAvailabilityParameters,
        CloudError: CloudError,
        ExportRDBParameters: ExportRDBParameters,
        ImportRDBParameters: ImportRDBParameters,
        NotificationListResponse: NotificationListResponse,
        ProxyResource: ProxyResource,
        RedisAccessKeys: RedisAccessKeys,
        RedisCreateParameters: RedisCreateParameters,
        RedisFirewallRule: RedisFirewallRule,
        RedisForceRebootResponse: RedisForceRebootResponse,
        RedisInstanceDetails: RedisInstanceDetails,
        RedisLinkedServer: RedisLinkedServer,
        RedisLinkedServerWithProperties: RedisLinkedServerWithProperties,
        RedisListResult: RedisListResult,
        RedisPatchSchedule: RedisPatchSchedule,
        RedisRebootParameters: RedisRebootParameters,
        RedisRegenerateKeyParameters: RedisRegenerateKeyParameters,
        RedisResource: RedisResource,
        RedisUpdateParameters: RedisUpdateParameters,
        Resource: Resource,
        ScheduleEntry: ScheduleEntry,
        Sku: Sku,
        TrackedResource: TrackedResource,
        UpgradeNotification: UpgradeNotification
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Redis. */
    var Redis = /** @class */ (function () {
        /**
         * Create a Redis.
         * @param {RedisManagementClientContext} client Reference to the service client.
         */
        function Redis(client) {
            this.client = client;
        }
        Redis.prototype.checkNameAvailability = function (parameters, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                options: options
            }, checkNameAvailabilityOperationSpec, callback);
        };
        Redis.prototype.listUpgradeNotifications = function (resourceGroupName, name, history, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                history: history,
                options: options
            }, listUpgradeNotificationsOperationSpec, callback);
        };
        /**
         * Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.
         * @param resourceGroupName The name of the resource group.
         * @param name The name of the Redis cache.
         * @param parameters Parameters supplied to the Create Redis operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.RedisCreateResponse>
         */
        Redis.prototype.create = function (resourceGroupName, name, parameters, options) {
            return this.beginCreate(resourceGroupName, name, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Redis.prototype.update = function (resourceGroupName, name, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                parameters: parameters,
                options: options
            }, updateOperationSpec, callback);
        };
        /**
         * Deletes a Redis cache.
         * @param resourceGroupName The name of the resource group.
         * @param name The name of the Redis cache.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Redis.prototype.deleteMethod = function (resourceGroupName, name, options) {
            return this.beginDeleteMethod(resourceGroupName, name, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Redis.prototype.get = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getOperationSpec, callback);
        };
        Redis.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Redis.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        Redis.prototype.listKeys = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listKeysOperationSpec, callback);
        };
        Redis.prototype.regenerateKey = function (resourceGroupName, name, keyType, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                keyType: keyType,
                options: options
            }, regenerateKeyOperationSpec, callback);
        };
        Redis.prototype.forceReboot = function (resourceGroupName, name, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                parameters: parameters,
                options: options
            }, forceRebootOperationSpec, callback);
        };
        /**
         * Import data into Redis cache.
         * @param resourceGroupName The name of the resource group.
         * @param name The name of the Redis cache.
         * @param parameters Parameters for Redis import operation.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Redis.prototype.importData = function (resourceGroupName, name, parameters, options) {
            return this.beginImportData(resourceGroupName, name, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Export data from the redis cache to blobs in a container.
         * @param resourceGroupName The name of the resource group.
         * @param name The name of the Redis cache.
         * @param parameters Parameters for Redis export operation.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Redis.prototype.exportData = function (resourceGroupName, name, parameters, options) {
            return this.beginExportData(resourceGroupName, name, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.
         * @param resourceGroupName The name of the resource group.
         * @param name The name of the Redis cache.
         * @param parameters Parameters supplied to the Create Redis operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Redis.prototype.beginCreate = function (resourceGroupName, name, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec, options);
        };
        /**
         * Deletes a Redis cache.
         * @param resourceGroupName The name of the resource group.
         * @param name The name of the Redis cache.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Redis.prototype.beginDeleteMethod = function (resourceGroupName, name, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * Import data into Redis cache.
         * @param resourceGroupName The name of the resource group.
         * @param name The name of the Redis cache.
         * @param parameters Parameters for Redis import operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Redis.prototype.beginImportData = function (resourceGroupName, name, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                parameters: parameters,
                options: options
            }, beginImportDataOperationSpec, options);
        };
        /**
         * Export data from the redis cache to blobs in a container.
         * @param resourceGroupName The name of the resource group.
         * @param name The name of the Redis cache.
         * @param parameters Parameters for Redis export operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Redis.prototype.beginExportData = function (resourceGroupName, name, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                parameters: parameters,
                options: options
            }, beginExportDataOperationSpec, options);
        };
        Redis.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        Redis.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return Redis;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var checkNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Cache/CheckNameAvailability",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, CheckNameAvailabilityParameters), { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listUpgradeNotificationsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/listUpgradeNotifications",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            history
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NotificationListResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, RedisUpdateParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: RedisResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RedisResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RedisListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Cache/Redis",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RedisListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/listKeys",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RedisAccessKeys
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var regenerateKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/regenerateKey",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                keyType: "keyType"
            },
            mapper: __assign(__assign({}, RedisRegenerateKeyParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: RedisAccessKeys
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var forceRebootOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/forceReboot",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, RedisRebootParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: RedisForceRebootResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginCreateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, RedisCreateParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: RedisResource
            },
            201: {
                bodyMapper: RedisResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginImportDataOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/import",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ImportRDBParameters), { required: true })
        },
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginExportDataOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/export",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ExportRDBParameters), { required: true })
        },
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RedisListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RedisListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        BaseResource: BaseResource,
        CloudError: CloudError,
        ProxyResource: ProxyResource,
        RedisAccessKeys: RedisAccessKeys,
        RedisFirewallRule: RedisFirewallRule,
        RedisFirewallRuleCreateParameters: RedisFirewallRuleCreateParameters,
        RedisFirewallRuleListResult: RedisFirewallRuleListResult,
        RedisInstanceDetails: RedisInstanceDetails,
        RedisLinkedServer: RedisLinkedServer,
        RedisLinkedServerWithProperties: RedisLinkedServerWithProperties,
        RedisPatchSchedule: RedisPatchSchedule,
        RedisResource: RedisResource,
        Resource: Resource,
        ScheduleEntry: ScheduleEntry,
        Sku: Sku,
        TrackedResource: TrackedResource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a FirewallRules. */
    var FirewallRules = /** @class */ (function () {
        /**
         * Create a FirewallRules.
         * @param {RedisManagementClientContext} client Reference to the service client.
         */
        function FirewallRules(client) {
            this.client = client;
        }
        FirewallRules.prototype.listByRedisResource = function (resourceGroupName, cacheName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                cacheName: cacheName,
                options: options
            }, listByRedisResourceOperationSpec, callback);
        };
        FirewallRules.prototype.createOrUpdate = function (resourceGroupName, cacheName, ruleName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                cacheName: cacheName,
                ruleName: ruleName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        FirewallRules.prototype.get = function (resourceGroupName, cacheName, ruleName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                cacheName: cacheName,
                ruleName: ruleName,
                options: options
            }, getOperationSpec$1, callback);
        };
        FirewallRules.prototype.deleteMethod = function (resourceGroupName, cacheName, ruleName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                cacheName: cacheName,
                ruleName: ruleName,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        FirewallRules.prototype.listByRedisResourceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByRedisResourceNextOperationSpec, callback);
        };
        return FirewallRules;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listByRedisResourceOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{cacheName}/firewallRules",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            cacheName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RedisFirewallRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{cacheName}/firewallRules/{ruleName}",
        urlParameters: [
            resourceGroupName,
            cacheName,
            ruleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, RedisFirewallRuleCreateParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: RedisFirewallRule
            },
            201: {
                bodyMapper: RedisFirewallRule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{cacheName}/firewallRules/{ruleName}",
        urlParameters: [
            resourceGroupName,
            cacheName,
            ruleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RedisFirewallRule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{cacheName}/firewallRules/{ruleName}",
        urlParameters: [
            resourceGroupName,
            cacheName,
            ruleName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listByRedisResourceNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RedisFirewallRuleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        BaseResource: BaseResource,
        CloudError: CloudError,
        ProxyResource: ProxyResource,
        RedisAccessKeys: RedisAccessKeys,
        RedisFirewallRule: RedisFirewallRule,
        RedisInstanceDetails: RedisInstanceDetails,
        RedisLinkedServer: RedisLinkedServer,
        RedisLinkedServerWithProperties: RedisLinkedServerWithProperties,
        RedisPatchSchedule: RedisPatchSchedule,
        RedisPatchScheduleListResult: RedisPatchScheduleListResult,
        RedisResource: RedisResource,
        Resource: Resource,
        ScheduleEntry: ScheduleEntry,
        Sku: Sku,
        TrackedResource: TrackedResource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a PatchSchedules. */
    var PatchSchedules = /** @class */ (function () {
        /**
         * Create a PatchSchedules.
         * @param {RedisManagementClientContext} client Reference to the service client.
         */
        function PatchSchedules(client) {
            this.client = client;
        }
        PatchSchedules.prototype.listByRedisResource = function (resourceGroupName, cacheName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                cacheName: cacheName,
                options: options
            }, listByRedisResourceOperationSpec$1, callback);
        };
        PatchSchedules.prototype.createOrUpdate = function (resourceGroupName, name, scheduleEntries, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                scheduleEntries: scheduleEntries,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        PatchSchedules.prototype.deleteMethod = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        PatchSchedules.prototype.get = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, getOperationSpec$2, callback);
        };
        PatchSchedules.prototype.listByRedisResourceNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByRedisResourceNextOperationSpec$1, callback);
        };
        return PatchSchedules;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listByRedisResourceOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{cacheName}/patchSchedules",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            cacheName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RedisPatchScheduleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/patchSchedules/{default}",
        urlParameters: [
            resourceGroupName,
            name,
            defaultParameter,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                scheduleEntries: "scheduleEntries"
            },
            mapper: __assign(__assign({}, RedisPatchSchedule), { required: true })
        },
        responses: {
            200: {
                bodyMapper: RedisPatchSchedule
            },
            201: {
                bodyMapper: RedisPatchSchedule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/patchSchedules/{default}",
        urlParameters: [
            resourceGroupName,
            name,
            defaultParameter,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/patchSchedules/{default}",
        urlParameters: [
            resourceGroupName,
            name,
            defaultParameter,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RedisPatchSchedule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listByRedisResourceNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RedisPatchScheduleListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        BaseResource: BaseResource,
        CloudError: CloudError,
        ProxyResource: ProxyResource,
        RedisAccessKeys: RedisAccessKeys,
        RedisFirewallRule: RedisFirewallRule,
        RedisInstanceDetails: RedisInstanceDetails,
        RedisLinkedServer: RedisLinkedServer,
        RedisLinkedServerCreateParameters: RedisLinkedServerCreateParameters,
        RedisLinkedServerWithProperties: RedisLinkedServerWithProperties,
        RedisLinkedServerWithPropertiesList: RedisLinkedServerWithPropertiesList,
        RedisPatchSchedule: RedisPatchSchedule,
        RedisResource: RedisResource,
        Resource: Resource,
        ScheduleEntry: ScheduleEntry,
        Sku: Sku,
        TrackedResource: TrackedResource
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LinkedServer. */
    var LinkedServer = /** @class */ (function () {
        /**
         * Create a LinkedServer.
         * @param {RedisManagementClientContext} client Reference to the service client.
         */
        function LinkedServer(client) {
            this.client = client;
        }
        /**
         * Adds a linked server to the Redis cache (requires Premium SKU).
         * @param resourceGroupName The name of the resource group.
         * @param name The name of the Redis cache.
         * @param linkedServerName The name of the linked server that is being added to the Redis cache.
         * @param parameters Parameters supplied to the Create Linked server operation.
         * @param [options] The optional parameters
         * @returns Promise<Models.LinkedServerCreateResponse>
         */
        LinkedServer.prototype.create = function (resourceGroupName, name, linkedServerName, parameters, options) {
            return this.beginCreate(resourceGroupName, name, linkedServerName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        LinkedServer.prototype.deleteMethod = function (resourceGroupName, name, linkedServerName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                linkedServerName: linkedServerName,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        LinkedServer.prototype.get = function (resourceGroupName, name, linkedServerName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                linkedServerName: linkedServerName,
                options: options
            }, getOperationSpec$3, callback);
        };
        LinkedServer.prototype.list = function (resourceGroupName, name, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                name: name,
                options: options
            }, listOperationSpec$2, callback);
        };
        /**
         * Adds a linked server to the Redis cache (requires Premium SKU).
         * @param resourceGroupName The name of the resource group.
         * @param name The name of the Redis cache.
         * @param linkedServerName The name of the linked server that is being added to the Redis cache.
         * @param parameters Parameters supplied to the Create Linked server operation.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        LinkedServer.prototype.beginCreate = function (resourceGroupName, name, linkedServerName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                name: name,
                linkedServerName: linkedServerName,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec$1, options);
        };
        LinkedServer.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        return LinkedServer;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/linkedServers/{linkedServerName}",
        urlParameters: [
            resourceGroupName,
            name,
            linkedServerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/linkedServers/{linkedServerName}",
        urlParameters: [
            resourceGroupName,
            name,
            linkedServerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RedisLinkedServerWithProperties
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/linkedServers",
        urlParameters: [
            resourceGroupName,
            name,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RedisLinkedServerWithPropertiesList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginCreateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}/linkedServers/{linkedServerName}",
        urlParameters: [
            resourceGroupName,
            name,
            linkedServerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, RedisLinkedServerCreateParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: RedisLinkedServerWithProperties
            },
            201: {
                bodyMapper: RedisLinkedServerWithProperties
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RedisLinkedServerWithPropertiesList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-rediscache";
    var packageVersion = "4.0.0";
    var RedisManagementClientContext = /** @class */ (function (_super) {
        __extends(RedisManagementClientContext, _super);
        /**
         * Initializes a new instance of the RedisManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function RedisManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2019-07-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return RedisManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var RedisManagementClient = /** @class */ (function (_super) {
        __extends(RedisManagementClient, _super);
        /**
         * Initializes a new instance of the RedisManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function RedisManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.redis = new Redis(_this);
            _this.firewallRules = new FirewallRules(_this);
            _this.patchSchedules = new PatchSchedules(_this);
            _this.linkedServer = new LinkedServer(_this);
            return _this;
        }
        return RedisManagementClient;
    }(RedisManagementClientContext));

    exports.FirewallRules = FirewallRules;
    exports.LinkedServer = LinkedServer;
    exports.Operations = Operations;
    exports.PatchSchedules = PatchSchedules;
    exports.Redis = Redis;
    exports.RedisManagementClient = RedisManagementClient;
    exports.RedisManagementClientContext = RedisManagementClientContext;
    exports.RedisManagementMappers = mappers;
    exports.RedisManagementModels = index;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-rediscache.js.map
